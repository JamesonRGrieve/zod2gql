(self.webpackChunkzod2gql=self.webpackChunkzod2gql||[]).push([[443,590],{"./docs/Mutations.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>MDXContent});__webpack_require__("./node_modules/next/dist/compiled/react/index.js");var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/next/dist/compiled/react/jsx-runtime.js"),C_Users_Jameson_Source_AGI_aginterface_src_lib_zod2gql_node_modules_storybook_addon_docs_dist_shims_mdx_react_shim_mjs__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/@mdx-js/react/lib/index.js"),_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@storybook/addon-docs/dist/index.mjs"),_src_mutation_stories__WEBPACK_IMPORTED_MODULE_5__=(__webpack_require__("./src/index.ts"),__webpack_require__("./src/mutation.ts"),__webpack_require__("./src/mutation.stories.tsx"));function _createMdxContent(props){const _components={code:"code",h1:"h1",h2:"h2",p:"p",...(0,C_Users_Jameson_Source_AGI_aginterface_src_lib_zod2gql_node_modules_storybook_addon_docs_dist_shims_mdx_react_shim_mjs__WEBPACK_IMPORTED_MODULE_6__.R)(),...props.components};return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__.W8,{title:"Documentation/Mutations",of:_src_mutation_stories__WEBPACK_IMPORTED_MODULE_5__}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h1,{id:"graphql-mutations",children:"GraphQL Mutations"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["Learn how to generate GraphQL mutations from Zod schemas using ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"zod2gql"}),"."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"basic-mutation-generation",children:"Basic Mutation Generation"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["Generate a simple GraphQL mutation using the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"createMutation"})," helper function:"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__.kL,{language:"typescript",dark:!0,format:!0,code:"\nimport { z } from 'zod';\nimport { createMutation } from 'zod2gql';\n\nconst userResponseSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  email: z.string(),\n  createdAt: z.string(),\n}).describe('UserResponse'); // Set schema name for field inference\n\nconst mutation = createMutation(userResponseSchema, {\n  operationName: 'CreateUser',\n  variables: { \n    name: 'John Doe',\n    email: 'john@example.com',\n    password: 'secret123'\n  }\n});\n\nconsole.log(mutation);\n/* Output:\nmutation CreateUser($name: String!, $email: String!, $password: String!) {\n  userResponse(name: $name, email: $email, password: $password) {\n    id\n    name\n    email\n    createdAt\n  }\n}\n*/\n  "}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"array-mutations-with-automatic-pluralization",children:"Array Mutations with Automatic Pluralization"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"The library supports array schemas for mutations, automatically pluralizing field names:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__.kL,{language:"typescript",dark:!0,format:!0,code:"\nimport { z } from 'zod';\nimport { GQLType } from 'zod2gql';\n\nconst userResponseSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  email: z.string(),\n  createdAt: z.string(),\n}).describe('User'); // Set schema name using describe()\n\n// Bulk create users mutation\nconst mutation = z.array(userResponseSchema).toGQL(GQLType.Mutation, {\n  variables: {\n    users: [\n      { name: 'John Doe', email: 'john@example.com' },\n      { name: 'Jane Smith', email: 'jane@example.com' }\n    ]\n  },\n  inputTypeMap: {\n    users: '[UserInput!]'\n  }\n});\n\nconsole.log(mutation);\n/* Output:\nmutation($users: [UserInput!]!) {\n  createUsers(users: $users) {\n    id\n    name\n    email\n    createdAt\n  }\n}\n*/\n  "}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["Notice how the field name was automatically pluralized to ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"createUsers"})," when using an array schema.\nThis convention follows GraphQL best practices for bulk operations."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"You can also provide an explicit operation name:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__.kL,{language:"typescript",dark:!0,format:!0,code:"\n// Bulk delete mutation with explicit operation name\nconst mutation = z.array(userSchema).toGQL(GQLType.Mutation, {\n  operationName: 'DeleteUsers',\n  variables: {\n    ids: ['user1', 'user2', 'user3']\n  }\n});\n\nconsole.log(mutation);\n/* Output:\nmutation DeleteUsers($ids: [String!]!) {\n  deleteUsers(ids: $ids) {\n    id\n    name\n    email\n  }\n}\n*/\n  "}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"input-types-in-mutations",children:"Input Types in Mutations"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["For mutations with complex input types, you can use the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"inputTypeMap"})," option:"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__.kL,{language:"typescript",dark:!0,format:!0,code:"\nconst userResponseSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  email: z.string(),\n}).describe('User');\n\nconst mutation = createMutation(userResponseSchema, {\n  operationName: 'CreateUser',\n  variables: {\n    userData: {\n      name: 'John Doe',\n      email: 'john@example.com',\n      password: 'secret123'\n    }\n  },\n  inputTypeMap: {\n    userData: 'UserInput'\n  }\n});\n\nconsole.log(mutation);\n/* Output:\nmutation CreateUser($userData: UserInput!) {\n  createUser(userData: $userData) {\n    id\n    name\n    email\n  }\n}\n*/\n  "}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"complex-mutation-with-nested-types",children:"Complex Mutation with Nested Types"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"zod2gql"})," handles complex mutation response types with nested structures:"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__.kL,{language:"typescript",dark:!0,format:!0,code:"\nconst addressSchema = z.object({\n  street: z.string(),\n  city: z.string(),\n  zipCode: z.string(),\n}).describe('Address');\n\nconst createUserResponseSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  email: z.string(),\n  address: addressSchema,\n  createdAt: z.string(),\n}).describe('User');\n\nconst mutation = createMutation(createUserResponseSchema, {\n  operationName: 'CreateUser',\n  variables: {\n    userInput: {\n      name: 'John Doe',\n      email: 'john@example.com',\n      address: {\n        street: '123 Main St',\n        city: 'Anytown',\n        zipCode: '12345'\n      }\n    }\n  },\n  inputTypeMap: {\n    userInput: 'UserInput'\n  }\n});\n\nconsole.log(mutation);\n/* Output:\nmutation CreateUser($userInput: UserInput!) {\n  createUser(userInput: $userInput) {\n    id\n    name\n    email\n    address {\n      street\n      city\n      zipCode\n    }\n    createdAt\n  }\n}\n*/\n  "}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"multiple-input-variables",children:"Multiple Input Variables"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Mutations often require multiple input variables, which are easily supported:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__.kL,{language:"typescript",dark:!0,format:!0,code:"\nconst postSchema = z.object({\n  id: z.string(),\n  title: z.string(),\n  content: z.string(),\n  published: z.boolean(),\n}).describe('Post');\n\nconst mutation = createMutation(postSchema, {\n  operationName: 'UpdatePost',\n  variables: {\n    id: 'post123',\n    title: 'Updated Title',\n    content: 'Updated content...',\n    published: true\n  }\n});\n\nconsole.log(mutation);\n/* Output:\nmutation UpdatePost($id: String!, $title: String!, $content: String!, $published: Boolean!) {\n  updatePost(id: $id, title: $title, content: $content, published: $published) {\n    id\n    title\n    content\n    published\n  }\n}\n*/\n  "}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"handling-arrays-in-mutations",children:"Handling Arrays in Mutations"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Array fields in mutation responses are handled properly:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__.kL,{language:"typescript",dark:!0,format:!0,code:"\nconst createPostResponseSchema = z.object({\n  id: z.string(),\n  title: z.string(),\n  content: z.string(),\n  tags: z.array(z.string()),\n  createdAt: z.string(),\n}).describe('Post');\n\nconst mutation = createMutation(createPostResponseSchema, {\n  operationName: 'CreatePost',\n  variables: {\n    post: {\n      title: 'New Post',\n      content: 'Content here...',\n      tags: ['news', 'tech']\n    }\n  },\n  inputTypeMap: {\n    post: 'PostInput'\n  }\n});\n\nconsole.log(mutation);\n/* Output:\nmutation CreatePost($post: PostInput!) {\n  createPost(post: $post) {\n    id\n    title\n    content\n    tags\n    createdAt\n  }\n}\n*/\n  "}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"auto-inferring-input-types",children:"Auto-Inferring Input Types"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["Without an explicit ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"inputTypeMap"}),", ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"zod2gql"})," will try to infer input types from the variable names:"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__.kL,{language:"typescript",dark:!0,format:!0,code:"\nconst userResponseSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  email: z.string(),\n}).describe('User');\n\nconst mutation = createMutation(userResponseSchema, {\n  operationName: 'CreateUser',\n  variables: {\n    userData: {\n      name: 'John Doe',\n      email: 'john@example.com'\n    }\n  }\n  // No inputTypeMap provided\n});\n\nconsole.log(mutation);\n/* Output:\nmutation CreateUser($userData: UserDataInput!) {\n  createUser(userData: $userData) {\n    id\n    name\n    email\n  }\n}\n*/\n  "}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"live-examples",children:"Live Examples"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__.Hl,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__.gG,{id:"graphql-mutation--create-user-mutation"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__.Hl,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__.gG,{id:"graphql-mutation--bulk-create-users-mutation"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__.Hl,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__.gG,{id:"graphql-mutation--bulk-delete-users-mutation"})})]})}function MDXContent(props={}){const{wrapper:MDXLayout}={...(0,C_Users_Jameson_Source_AGI_aginterface_src_lib_zod2gql_node_modules_storybook_addon_docs_dist_shims_mdx_react_shim_mjs__WEBPACK_IMPORTED_MODULE_6__.R)(),...props.components};return MDXLayout?(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(MDXLayout,{...props,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_createMdxContent,{...props})}):_createMdxContent(props)}},"./node_modules/@mdx-js/react/lib/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{R:()=>useMDXComponents,x:()=>MDXProvider});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/next/dist/compiled/react/index.js");const emptyComponents={},MDXContext=react__WEBPACK_IMPORTED_MODULE_0__.createContext(emptyComponents);function useMDXComponents(components){const contextComponents=react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext);return react__WEBPACK_IMPORTED_MODULE_0__.useMemo((function(){return"function"==typeof components?components(contextComponents):{...contextComponents,...components}}),[contextComponents,components])}function MDXProvider(properties){let allComponents;return allComponents=properties.disableParentContext?"function"==typeof properties.components?properties.components(emptyComponents):properties.components||emptyComponents:useMDXComponents(properties.components),react__WEBPACK_IMPORTED_MODULE_0__.createElement(MDXContext.Provider,{value:allComponents},properties.children)}},"./node_modules/@storybook/addon-docs/dist/index.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{Hl:()=>_storybook_blocks__WEBPACK_IMPORTED_MODULE_4__.Hl,W8:()=>_storybook_blocks__WEBPACK_IMPORTED_MODULE_4__.W8,gG:()=>_storybook_blocks__WEBPACK_IMPORTED_MODULE_4__.gG,kL:()=>_storybook_blocks__WEBPACK_IMPORTED_MODULE_4__.kL});__webpack_require__("./node_modules/@storybook/addon-docs/dist/chunk-PRSJUHPQ.mjs"),__webpack_require__("./node_modules/@storybook/addon-docs/dist/chunk-NUUEMKO5.mjs"),__webpack_require__("./node_modules/@storybook/addon-docs/dist/chunk-H6MOWX77.mjs"),__webpack_require__("storybook/internal/preview-api");var _storybook_blocks__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs")},"./node_modules/@storybook/blocks/dist sync recursive":module=>{function webpackEmptyContext(req){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}webpackEmptyContext.keys=()=>[],webpackEmptyContext.resolve=webpackEmptyContext,webpackEmptyContext.id="./node_modules/@storybook/blocks/dist sync recursive",module.exports=webpackEmptyContext},"./node_modules/@storybook/core/dist/components sync recursive":module=>{function webpackEmptyContext(req){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}webpackEmptyContext.keys=()=>[],webpackEmptyContext.resolve=webpackEmptyContext,webpackEmptyContext.id="./node_modules/@storybook/core/dist/components sync recursive",module.exports=webpackEmptyContext},"./node_modules/@storybook/core/dist/theming sync recursive":module=>{function webpackEmptyContext(req){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}webpackEmptyContext.keys=()=>[],webpackEmptyContext.resolve=webpackEmptyContext,webpackEmptyContext.id="./node_modules/@storybook/core/dist/theming sync recursive",module.exports=webpackEmptyContext},"./src/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{Hh:()=>formatVariablesDeclaration,Jf:()=>getOperationFieldName,Nt:()=>GQLType,ON:()=>formatFieldArguments,fO:()=>processFields});var zod__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/zod/lib/index.mjs"),_mutation__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/mutation.ts"),_query__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/query.ts"),_subscription__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/subscription.ts"),GQLType=function(GQLType){return GQLType.Query="query",GQLType.Mutation="mutation",GQLType.Subscription="subscription",GQLType}({});const getOperationFieldName=(schema,operationName,isArray=!1)=>{let fieldName="";if(operationName){fieldName=operationName;const prefixes=["Get","Create","Update","Delete","Subscribe"];for(const prefix of prefixes)if(fieldName.startsWith(prefix)){fieldName=fieldName.substring(prefix.length);break}fieldName=fieldName.charAt(0).toLowerCase()+fieldName.slice(1)}else if(schema instanceof zod__WEBPACK_IMPORTED_MODULE_3__.z.ZodArray){const elementSchema=schema._def.type;elementSchema instanceof zod__WEBPACK_IMPORTED_MODULE_3__.z.ZodObject&&(fieldName=getOperationFieldName(elementSchema),isArray=!0)}else if(schema instanceof zod__WEBPACK_IMPORTED_MODULE_3__.z.ZodObject)if(schema.description)fieldName=schema.description.charAt(0).toLowerCase()+schema.description.slice(1);else{const typeName=schema._def.typeName||"";typeName&&"ZodObject"!==typeName&&(fieldName=typeName.charAt(0).toLowerCase()+typeName.slice(1))}return isArray?(word=fieldName)?word.endsWith("y")?word.slice(0,-1)+"ies":word.endsWith("s")||word.endsWith("x")||word.endsWith("ch")||word.endsWith("sh")?word+"es":word+"s":"":fieldName;var word},formatVariablesDeclaration=(variables,inputTypeMap)=>variables&&0!==Object.keys(variables).length?`(${Object.entries(variables).map((([key,value])=>{if(inputTypeMap&&inputTypeMap[key])return`$${key}: ${inputTypeMap[key]}!`;const inferType=val=>{if(null===val)return"String";if(Array.isArray(val)){return`[${val.length>0?inferType(val[0]):"String"}]`}switch(typeof val){case"number":return Number.isInteger(val)?"Int":"Float";case"boolean":return"Boolean";case"object":return`${key.charAt(0).toUpperCase()+key.slice(1)}Input`;default:return"String"}};return`$${key}: ${inferType(value)}!`})).join(", ")})`:"",formatFieldArguments=variables=>variables&&0!==Object.keys(variables).length?`(${Object.entries(variables).map((([key])=>`${key}: $${key}`)).join(", ")})`:"",processFields=(schema,queryType,options={},depth=0)=>{const{maxDepth=10}=options;if(depth>maxDepth)return"";const indent="  ".repeat(depth);let query="";const shape=schema._def.shape();for(const[key,value]of Object.entries(shape)){const processSchema=(schema,fieldName)=>{const unwrappedSchema=schema instanceof zod__WEBPACK_IMPORTED_MODULE_3__.z.ZodOptional||schema instanceof zod__WEBPACK_IMPORTED_MODULE_3__.z.ZodNullable?schema._def.innerType:schema;if(unwrappedSchema instanceof zod__WEBPACK_IMPORTED_MODULE_3__.z.ZodObject)query+=`${indent}${fieldName} {\n${processFields(unwrappedSchema,queryType,options,depth+1)}${indent}}\n`;else if(unwrappedSchema instanceof zod__WEBPACK_IMPORTED_MODULE_3__.z.ZodArray){const elementType=unwrappedSchema._def.type;elementType instanceof zod__WEBPACK_IMPORTED_MODULE_3__.z.ZodObject?query+=`${indent}${fieldName} {\n${processFields(elementType,queryType,options,depth+1)}${indent}}\n`:query+=`${indent}${fieldName}\n`}else query+=`${indent}${fieldName}\n`};value instanceof zod__WEBPACK_IMPORTED_MODULE_3__.z.ZodType?processSchema(value,key):query+=`${indent}${key}\n`}return query};zod__WEBPACK_IMPORTED_MODULE_3__.z.ZodObject.prototype.toGQL=function(queryType="query",options={},depth=0){if(depth>0)return processFields(this,queryType,options,depth);switch(queryType){case"query":return(0,_query__WEBPACK_IMPORTED_MODULE_1__.O)(this,options);case"mutation":return(0,_mutation__WEBPACK_IMPORTED_MODULE_0__.n)(this,options);case"subscription":return(0,_subscription__WEBPACK_IMPORTED_MODULE_2__.d)(this,options);default:return""}},zod__WEBPACK_IMPORTED_MODULE_3__.z.ZodArray.prototype.toGQL=function(queryType="query",options={},depth=0){if(depth>0)return"";if(!(this._def.type instanceof zod__WEBPACK_IMPORTED_MODULE_3__.z.ZodObject))throw new Error("Array element must be a ZodObject for toGQL");switch(queryType){case"query":return function processArrayQuery(schema,options={}){const{operationName,variables,maxDepth=10}=options,elementSchema=schema._def.type;if(!(elementSchema instanceof zod__WEBPACK_IMPORTED_MODULE_3__.z.ZodObject))throw new Error("Array element must be a ZodObject");const operation=operationName?` ${operationName}`:"",varsString=formatVariablesDeclaration(variables,options.inputTypeMap),fieldArgs=formatFieldArguments(variables);return`query${operation}${varsString} {\n  ${getOperationFieldName(schema,operationName)}${fieldArgs} {\n${processFields(elementSchema,"query",options,2)}  }\n}`}(this,options);case"mutation":return function processArrayMutation(schema,options={}){const{operationName,variables,maxDepth=10}=options,elementSchema=schema._def.type;if(!(elementSchema instanceof zod__WEBPACK_IMPORTED_MODULE_3__.z.ZodObject))throw new Error("Array element must be a ZodObject");const operation=operationName?` ${operationName}`:"",varsString=formatVariablesDeclaration(variables,options.inputTypeMap),fieldArgs=formatFieldArguments(variables);return`mutation${operation}${varsString} {\n  ${getOperationFieldName(schema,operationName)}${fieldArgs} {\n${processFields(elementSchema,"mutation",options,2)}  }\n}`}(this,options);case"subscription":return function processArraySubscription(schema,options={}){const{operationName,variables,maxDepth=10}=options,elementSchema=schema._def.type;if(!(elementSchema instanceof zod__WEBPACK_IMPORTED_MODULE_3__.z.ZodObject))throw new Error("Array element must be a ZodObject");const operation=operationName?` ${operationName}`:"",varsString=formatVariablesDeclaration(variables,options.inputTypeMap),fieldArgs=formatFieldArguments(variables);return`subscription${operation}${varsString} {\n  ${getOperationFieldName(schema,operationName)}${fieldArgs} {\n${processFields(elementSchema,"subscription",options,2)}  }\n}`}(this,options);default:return""}}},"./src/mutation.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{BulkCreatePostsMutation:()=>BulkCreatePostsMutation,BulkCreateUsersMutation:()=>BulkCreateUsersMutation,BulkDeleteUsersMutation:()=>BulkDeleteUsersMutation,CreateCommentMutation:()=>CreateCommentMutation,CreateOrderWithNestedInput:()=>CreateOrderWithNestedInput,CreatePostMutation:()=>CreatePostMutation,CreateProductWithInputTypes:()=>CreateProductWithInputTypes,CreateUserMutation:()=>CreateUserMutation,InferredMutationName:()=>InferredMutationName,LimitedDepthMutation:()=>LimitedDepthMutation,UpdatePostMutation:()=>UpdatePostMutation,UpdateProductWithMultipleInputs:()=>UpdateProductWithMultipleInputs,UpdateUserMutation:()=>UpdateUserMutation,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/next/dist/compiled/react/jsx-runtime.js"),_storybook_test__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@storybook/test/dist/index.mjs"),zod__WEBPACK_IMPORTED_MODULE_5__=(__webpack_require__("./node_modules/next/dist/compiled/react/index.js"),__webpack_require__("./node_modules/zod/lib/index.mjs")),_index__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/index.ts"),_mutation__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/mutation.ts");const __WEBPACK_DEFAULT_EXPORT__={title:"GraphQL/Mutation",component:({schema,options,expectedOutput})=>{const mutation="function"==typeof schema.toGQL?schema.toGQL(_index__WEBPACK_IMPORTED_MODULE_3__.Nt.Mutation,options):(0,_mutation__WEBPACK_IMPORTED_MODULE_4__.W)(schema,options);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("div",{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("h3",{children:"Generated GraphQL Mutation"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("pre",{"data-testid":"mutation-output",children:mutation}),expectedOutput&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("h3",{children:"Expected Output"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("pre",{"data-testid":"expected-output",children:expectedOutput})]})]})},parameters:{docs:{description:{component:"Generate GraphQL mutations from Zod schemas. See the [Mutations documentation](/?path=/docs/documentation-mutations--docs) for more details."},source:{type:"dynamic",excludeDecorators:!0}}}},addressSchema=zod__WEBPACK_IMPORTED_MODULE_5__.z.object({street:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),city:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),state:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),zipCode:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),country:zod__WEBPACK_IMPORTED_MODULE_5__.z.string().optional()}).describe("Address"),createUserResponseSchema=zod__WEBPACK_IMPORTED_MODULE_5__.z.object({id:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),name:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),email:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),createdAt:zod__WEBPACK_IMPORTED_MODULE_5__.z.string()}).describe("CreateUserResponse"),updateUserResponseSchema=zod__WEBPACK_IMPORTED_MODULE_5__.z.object({id:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),name:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),email:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),age:zod__WEBPACK_IMPORTED_MODULE_5__.z.number().optional(),isActive:zod__WEBPACK_IMPORTED_MODULE_5__.z.boolean().optional(),updatedAt:zod__WEBPACK_IMPORTED_MODULE_5__.z.string()}).describe("UpdateUserResponse"),userSchema=zod__WEBPACK_IMPORTED_MODULE_5__.z.object({id:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),name:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),email:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),age:zod__WEBPACK_IMPORTED_MODULE_5__.z.number().optional(),isActive:zod__WEBPACK_IMPORTED_MODULE_5__.z.boolean().optional(),address:addressSchema.optional()}).describe("User"),createPostResponseSchema=zod__WEBPACK_IMPORTED_MODULE_5__.z.object({id:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),title:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),content:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),authorId:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),published:zod__WEBPACK_IMPORTED_MODULE_5__.z.boolean(),createdAt:zod__WEBPACK_IMPORTED_MODULE_5__.z.string()}).describe("CreatePostResponse"),updatePostResponseSchema=zod__WEBPACK_IMPORTED_MODULE_5__.z.object({id:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),title:zod__WEBPACK_IMPORTED_MODULE_5__.z.string().optional(),content:zod__WEBPACK_IMPORTED_MODULE_5__.z.string().optional(),published:zod__WEBPACK_IMPORTED_MODULE_5__.z.boolean().optional(),updatedAt:zod__WEBPACK_IMPORTED_MODULE_5__.z.string()}).describe("UpdatePostResponse"),createCommentResponseSchema=zod__WEBPACK_IMPORTED_MODULE_5__.z.object({id:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),text:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),authorId:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),postId:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),createdAt:zod__WEBPACK_IMPORTED_MODULE_5__.z.string()}).describe("CreateCommentResponse"),productSchema=zod__WEBPACK_IMPORTED_MODULE_5__.z.object({id:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),name:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),description:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),price:zod__WEBPACK_IMPORTED_MODULE_5__.z.number(),categories:zod__WEBPACK_IMPORTED_MODULE_5__.z.array(zod__WEBPACK_IMPORTED_MODULE_5__.z.string()),attributes:zod__WEBPACK_IMPORTED_MODULE_5__.z.record(zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),zod__WEBPACK_IMPORTED_MODULE_5__.z.union([zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),zod__WEBPACK_IMPORTED_MODULE_5__.z.number(),zod__WEBPACK_IMPORTED_MODULE_5__.z.boolean()])),stockQuantity:zod__WEBPACK_IMPORTED_MODULE_5__.z.number(),isAvailable:zod__WEBPACK_IMPORTED_MODULE_5__.z.boolean(),createdAt:zod__WEBPACK_IMPORTED_MODULE_5__.z.string()}).describe("Product"),orderItemSchema=zod__WEBPACK_IMPORTED_MODULE_5__.z.object({productId:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),quantity:zod__WEBPACK_IMPORTED_MODULE_5__.z.number(),unitPrice:zod__WEBPACK_IMPORTED_MODULE_5__.z.number()}).describe("OrderItem"),createOrderResponseSchema=zod__WEBPACK_IMPORTED_MODULE_5__.z.object({id:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),customerId:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),items:zod__WEBPACK_IMPORTED_MODULE_5__.z.array(orderItemSchema),totalAmount:zod__WEBPACK_IMPORTED_MODULE_5__.z.number(),status:zod__WEBPACK_IMPORTED_MODULE_5__.z.enum(["pending","processing","shipped","delivered","cancelled"]),shippingAddressId:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),billingAddressId:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),createdAt:zod__WEBPACK_IMPORTED_MODULE_5__.z.string()}).describe("CreateOrderResponse"),CreateUserMutation={args:{schema:createUserResponseSchema,options:{operationName:"CreateUser",variables:{name:"John Doe",email:"john@example.com",password:"secret123"}},expectedOutput:"mutation CreateUser($name: String!, $email: String!, $password: String!) {\n  createUserResponse(name: $name, email: $email, password: $password) {\n    id\n    name\n    email\n    createdAt\n  }\n}"},play:async({canvasElement})=>{const canvas=(0,_storybook_test__WEBPACK_IMPORTED_MODULE_1__.ux)(canvasElement),mutationOutput=canvas.getByTestId("mutation-output"),expectedOutput=canvas.getByTestId("expected-output"),normalizeString=str=>str.replace(/\s+/g,"");(0,_storybook_test__WEBPACK_IMPORTED_MODULE_1__.E3)(normalizeString(mutationOutput.textContent||"")).toBe(normalizeString(expectedOutput.textContent||""))}},BulkCreateUsersMutation={args:{schema:zod__WEBPACK_IMPORTED_MODULE_5__.z.array(createUserResponseSchema),options:{variables:{users:[{name:"John Doe",email:"john@example.com"},{name:"Jane Smith",email:"jane@example.com"}]},inputTypeMap:{users:"[UserInput!]"}},expectedOutput:"mutation($users: [UserInput!]!) {\n  createUserResponses(users: $users) {\n    id\n    name\n    email\n    createdAt\n  }\n}"},parameters:{docs:{description:{story:"A bulk mutation using array schema for automatic pluralization of the field name."},source:{type:"code"}}}},BulkDeleteUsersMutation={args:{schema:zod__WEBPACK_IMPORTED_MODULE_5__.z.array(userSchema),options:{operationName:"DeleteUsers",variables:{ids:["user1","user2","user3"]}},expectedOutput:"mutation DeleteUsers($ids: [String!]!) {\n  deleteUsers(ids: $ids) {\n    id\n    name\n    email\n    age\n    isActive\n    address {\n      street\n      city\n      state\n      zipCode\n      country\n    }\n  }\n}"},parameters:{docs:{description:{story:"A bulk deletion mutation with array schema and explicit operation name."},source:{type:"code"}}}},UpdateUserMutation={args:{schema:updateUserResponseSchema,options:{operationName:"UpdateUser",variables:{id:"user123",name:"John Updated",email:"john.updated@example.com",isActive:!0}},expectedOutput:"mutation UpdateUser($id: String!, $name: String!, $email: String!, $isActive: Boolean!) {\n  updateUserResponse(id: $id, name: $name, email: $email, isActive: $isActive) {\n    id\n    name\n    email\n    age\n    isActive\n    updatedAt\n  }\n}"}},CreatePostMutation={args:{schema:createPostResponseSchema,options:{operationName:"CreatePost",variables:{title:"My First Post",content:"This is the content of my first post",authorId:"user123",published:!0}},expectedOutput:"mutation CreatePost($title: String!, $content: String!, $authorId: String!, $published: Boolean!) {\n  createPostResponse(title: $title, content: $content, authorId: $authorId, published: $published) {\n    id\n    title\n    content\n    authorId\n    published\n    createdAt\n  }\n}"}},BulkCreatePostsMutation={args:{schema:zod__WEBPACK_IMPORTED_MODULE_5__.z.array(createPostResponseSchema),options:{variables:{posts:[{title:"First Post",content:"Content of first post",authorId:"user123",published:!0},{title:"Second Post",content:"Content of second post",authorId:"user123",published:!1}]}},expectedOutput:"mutation($posts: [PostsInput!]!) {\n  createPostResponses(posts: $posts) {\n    id\n    title\n    content\n    authorId\n    published\n    createdAt\n  }\n}"}},UpdatePostMutation={args:{schema:updatePostResponseSchema,options:{operationName:"UpdatePost",variables:{id:"post123",title:"Updated Post Title",published:!0}},expectedOutput:"mutation UpdatePost($id: String!, $title: String!, $published: Boolean!) {\n  updatePostResponse(id: $id, title: $title, published: $published) {\n    id\n    title\n    content\n    published\n    updatedAt\n  }\n}"}},CreateCommentMutation={args:{schema:createCommentResponseSchema,options:{operationName:"CreateComment",variables:{text:"This is my comment",postId:"post123",authorId:"user123"}},expectedOutput:"mutation CreateComment($text: String!, $postId: String!, $authorId: String!) {\n  createCommentResponse(text: $text, postId: $postId, authorId: $authorId) {\n    id\n    text\n    authorId\n    postId\n    createdAt\n  }\n}"}},CreateProductWithInputTypes={args:{schema:productSchema,options:{operationName:"CreateProduct",variables:{productInput:{name:"New Product",description:"Product description",price:99.99,categories:["electronics","gadgets"],attributes:{color:"black",weight:150}}},inputTypeMap:{productInput:"ProductInput"}},expectedOutput:"mutation CreateProduct($productInput: ProductInput!) {\n  product(productInput: $productInput) {\n    id\n    name\n    description\n    price\n    categories\n    attributes\n    stockQuantity\n    isAvailable\n    createdAt\n  }\n}"}},CreateOrderWithNestedInput={args:{schema:createOrderResponseSchema,options:{operationName:"CreateOrder",variables:{order:{customerId:"cust123",items:[{productId:"prod1",quantity:2,unitPrice:10.99},{productId:"prod2",quantity:1,unitPrice:24.99}],shippingAddress:{street:"123 Main St",city:"Anytown",state:"ST",zipCode:"12345"},billingAddress:{street:"123 Main St",city:"Anytown",state:"ST",zipCode:"12345"}}},inputTypeMap:{order:"OrderInput"}},expectedOutput:"mutation CreateOrder($order: OrderInput!) {\n  createOrderResponse(order: $order) {\n    id\n    customerId\n    items {\n      productId\n      quantity\n      unitPrice\n    }\n    totalAmount\n    status\n    shippingAddressId\n    billingAddressId\n    createdAt\n  }\n}"}},UpdateProductWithMultipleInputs={args:{schema:productSchema,options:{operationName:"UpdateProduct",variables:{id:"prod123",productData:{name:"Updated Product",price:129.99},stockData:{quantity:50,isAvailable:!0}}},expectedOutput:"mutation UpdateProduct($id: String!, $productData: ProductDataInput!, $stockData: StockDataInput!) {\n  product(id: $id, productData: $productData, stockData: $stockData) {\n    id\n    name\n    description\n    price\n    categories\n    attributes\n    stockQuantity\n    isAvailable\n    createdAt\n  }\n}"}},InferredMutationName={args:{schema:userSchema,options:{variables:{name:"John Doe",email:"john@example.com"}},expectedOutput:"mutation($name: String!, $email: String!) {\n  user(name: $name, email: $email) {\n    id\n    name\n    email\n    age\n    isActive\n    address {\n      street\n      city\n      state\n      zipCode\n      country\n    }\n  }\n}"}},LimitedDepthMutation={args:{schema:userSchema,options:{operationName:"CreateUser",variables:{userData:{name:"John Doe",email:"john@example.com",address:{street:"123 Main St",city:"Anytown",state:"ST",zipCode:"12345"}}},maxDepth:3},expectedOutput:"mutation CreateUser($userData: UserDataInput!) {\n  user(userData: $userData) {\n    id\n    name\n    email\n    age\n    isActive\n    address {\n      street\n      city\n      state\n      zipCode\n      country\n    }\n  }\n}"}},__namedExportsOrder=["CreateUserMutation","BulkCreateUsersMutation","BulkDeleteUsersMutation","UpdateUserMutation","CreatePostMutation","BulkCreatePostsMutation","UpdatePostMutation","CreateCommentMutation","CreateProductWithInputTypes","CreateOrderWithNestedInput","UpdateProductWithMultipleInputs","InferredMutationName","LimitedDepthMutation"];CreateUserMutation.parameters={...CreateUserMutation.parameters,docs:{...CreateUserMutation.parameters?.docs,source:{originalSource:"{\n  args: {\n    schema: createUserResponseSchema,\n    options: {\n      operationName: 'CreateUser',\n      variables: {\n        name: 'John Doe',\n        email: 'john@example.com',\n        password: 'secret123'\n      }\n    },\n    expectedOutput: `mutation CreateUser($name: String!, $email: String!, $password: String!) {\n  createUserResponse(name: $name, email: $email, password: $password) {\n    id\n    name\n    email\n    createdAt\n  }\n}`\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n\n    // Get the generated output\n    const mutationOutput = canvas.getByTestId('mutation-output');\n    const expectedOutput = canvas.getByTestId('expected-output');\n\n    // Normalize strings (remove whitespace) for comparison\n    const normalizeString = (str: string) => str.replace(/\\s+/g, '');\n    expect(normalizeString(mutationOutput.textContent || '')).toBe(normalizeString(expectedOutput.textContent || ''));\n  }\n}",...CreateUserMutation.parameters?.docs?.source}}},BulkCreateUsersMutation.parameters={...BulkCreateUsersMutation.parameters,docs:{...BulkCreateUsersMutation.parameters?.docs,source:{originalSource:"{\n  args: {\n    schema: z.array(createUserResponseSchema),\n    options: {\n      variables: {\n        users: [{\n          name: 'John Doe',\n          email: 'john@example.com'\n        }, {\n          name: 'Jane Smith',\n          email: 'jane@example.com'\n        }]\n      },\n      inputTypeMap: {\n        users: '[UserInput!]'\n      }\n    },\n    expectedOutput: `mutation($users: [UserInput!]!) {\n  createUserResponses(users: $users) {\n    id\n    name\n    email\n    createdAt\n  }\n}`\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'A bulk mutation using array schema for automatic pluralization of the field name.'\n      },\n      source: {\n        type: 'code'\n      }\n    }\n  }\n}",...BulkCreateUsersMutation.parameters?.docs?.source}}},BulkDeleteUsersMutation.parameters={...BulkDeleteUsersMutation.parameters,docs:{...BulkDeleteUsersMutation.parameters?.docs,source:{originalSource:"{\n  args: {\n    schema: z.array(userSchema),\n    options: {\n      operationName: 'DeleteUsers',\n      variables: {\n        ids: ['user1', 'user2', 'user3']\n      }\n    },\n    expectedOutput: `mutation DeleteUsers($ids: [String!]!) {\n  deleteUsers(ids: $ids) {\n    id\n    name\n    email\n    age\n    isActive\n    address {\n      street\n      city\n      state\n      zipCode\n      country\n    }\n  }\n}`\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'A bulk deletion mutation with array schema and explicit operation name.'\n      },\n      source: {\n        type: 'code'\n      }\n    }\n  }\n}",...BulkDeleteUsersMutation.parameters?.docs?.source}}},UpdateUserMutation.parameters={...UpdateUserMutation.parameters,docs:{...UpdateUserMutation.parameters?.docs,source:{originalSource:"{\n  args: {\n    schema: updateUserResponseSchema,\n    options: {\n      operationName: 'UpdateUser',\n      variables: {\n        id: 'user123',\n        name: 'John Updated',\n        email: 'john.updated@example.com',\n        isActive: true\n      }\n    },\n    expectedOutput: `mutation UpdateUser($id: String!, $name: String!, $email: String!, $isActive: Boolean!) {\n  updateUserResponse(id: $id, name: $name, email: $email, isActive: $isActive) {\n    id\n    name\n    email\n    age\n    isActive\n    updatedAt\n  }\n}`\n  }\n}",...UpdateUserMutation.parameters?.docs?.source}}},CreatePostMutation.parameters={...CreatePostMutation.parameters,docs:{...CreatePostMutation.parameters?.docs,source:{originalSource:"{\n  args: {\n    schema: createPostResponseSchema,\n    options: {\n      operationName: 'CreatePost',\n      variables: {\n        title: 'My First Post',\n        content: 'This is the content of my first post',\n        authorId: 'user123',\n        published: true\n      }\n    },\n    expectedOutput: `mutation CreatePost($title: String!, $content: String!, $authorId: String!, $published: Boolean!) {\n  createPostResponse(title: $title, content: $content, authorId: $authorId, published: $published) {\n    id\n    title\n    content\n    authorId\n    published\n    createdAt\n  }\n}`\n  }\n}",...CreatePostMutation.parameters?.docs?.source}}},BulkCreatePostsMutation.parameters={...BulkCreatePostsMutation.parameters,docs:{...BulkCreatePostsMutation.parameters?.docs,source:{originalSource:"{\n  args: {\n    schema: z.array(createPostResponseSchema),\n    options: {\n      variables: {\n        posts: [{\n          title: 'First Post',\n          content: 'Content of first post',\n          authorId: 'user123',\n          published: true\n        }, {\n          title: 'Second Post',\n          content: 'Content of second post',\n          authorId: 'user123',\n          published: false\n        }]\n      }\n    },\n    expectedOutput: `mutation($posts: [PostsInput!]!) {\n  createPostResponses(posts: $posts) {\n    id\n    title\n    content\n    authorId\n    published\n    createdAt\n  }\n}`\n  }\n}",...BulkCreatePostsMutation.parameters?.docs?.source}}},UpdatePostMutation.parameters={...UpdatePostMutation.parameters,docs:{...UpdatePostMutation.parameters?.docs,source:{originalSource:"{\n  args: {\n    schema: updatePostResponseSchema,\n    options: {\n      operationName: 'UpdatePost',\n      variables: {\n        id: 'post123',\n        title: 'Updated Post Title',\n        published: true\n      }\n    },\n    expectedOutput: `mutation UpdatePost($id: String!, $title: String!, $published: Boolean!) {\n  updatePostResponse(id: $id, title: $title, published: $published) {\n    id\n    title\n    content\n    published\n    updatedAt\n  }\n}`\n  }\n}",...UpdatePostMutation.parameters?.docs?.source}}},CreateCommentMutation.parameters={...CreateCommentMutation.parameters,docs:{...CreateCommentMutation.parameters?.docs,source:{originalSource:"{\n  args: {\n    schema: createCommentResponseSchema,\n    options: {\n      operationName: 'CreateComment',\n      variables: {\n        text: 'This is my comment',\n        postId: 'post123',\n        authorId: 'user123'\n      }\n    },\n    expectedOutput: `mutation CreateComment($text: String!, $postId: String!, $authorId: String!) {\n  createCommentResponse(text: $text, postId: $postId, authorId: $authorId) {\n    id\n    text\n    authorId\n    postId\n    createdAt\n  }\n}`\n  }\n}",...CreateCommentMutation.parameters?.docs?.source}}},CreateProductWithInputTypes.parameters={...CreateProductWithInputTypes.parameters,docs:{...CreateProductWithInputTypes.parameters?.docs,source:{originalSource:"{\n  args: {\n    schema: productSchema,\n    options: {\n      operationName: 'CreateProduct',\n      variables: {\n        productInput: {\n          name: 'New Product',\n          description: 'Product description',\n          price: 99.99,\n          categories: ['electronics', 'gadgets'],\n          attributes: {\n            color: 'black',\n            weight: 150\n          }\n        }\n      },\n      inputTypeMap: {\n        productInput: 'ProductInput'\n      }\n    },\n    expectedOutput: `mutation CreateProduct($productInput: ProductInput!) {\n  product(productInput: $productInput) {\n    id\n    name\n    description\n    price\n    categories\n    attributes\n    stockQuantity\n    isAvailable\n    createdAt\n  }\n}`\n  }\n}",...CreateProductWithInputTypes.parameters?.docs?.source}}},CreateOrderWithNestedInput.parameters={...CreateOrderWithNestedInput.parameters,docs:{...CreateOrderWithNestedInput.parameters?.docs,source:{originalSource:"{\n  args: {\n    schema: createOrderResponseSchema,\n    options: {\n      operationName: 'CreateOrder',\n      variables: {\n        order: {\n          customerId: 'cust123',\n          items: [{\n            productId: 'prod1',\n            quantity: 2,\n            unitPrice: 10.99\n          }, {\n            productId: 'prod2',\n            quantity: 1,\n            unitPrice: 24.99\n          }],\n          shippingAddress: {\n            street: '123 Main St',\n            city: 'Anytown',\n            state: 'ST',\n            zipCode: '12345'\n          },\n          billingAddress: {\n            street: '123 Main St',\n            city: 'Anytown',\n            state: 'ST',\n            zipCode: '12345'\n          }\n        }\n      },\n      inputTypeMap: {\n        order: 'OrderInput'\n      }\n    },\n    expectedOutput: `mutation CreateOrder($order: OrderInput!) {\n  createOrderResponse(order: $order) {\n    id\n    customerId\n    items {\n      productId\n      quantity\n      unitPrice\n    }\n    totalAmount\n    status\n    shippingAddressId\n    billingAddressId\n    createdAt\n  }\n}`\n  }\n}",...CreateOrderWithNestedInput.parameters?.docs?.source}}},UpdateProductWithMultipleInputs.parameters={...UpdateProductWithMultipleInputs.parameters,docs:{...UpdateProductWithMultipleInputs.parameters?.docs,source:{originalSource:"{\n  args: {\n    schema: productSchema,\n    options: {\n      operationName: 'UpdateProduct',\n      variables: {\n        id: 'prod123',\n        productData: {\n          name: 'Updated Product',\n          price: 129.99\n        },\n        stockData: {\n          quantity: 50,\n          isAvailable: true\n        }\n      }\n    },\n    expectedOutput: `mutation UpdateProduct($id: String!, $productData: ProductDataInput!, $stockData: StockDataInput!) {\n  product(id: $id, productData: $productData, stockData: $stockData) {\n    id\n    name\n    description\n    price\n    categories\n    attributes\n    stockQuantity\n    isAvailable\n    createdAt\n  }\n}`\n  }\n}",...UpdateProductWithMultipleInputs.parameters?.docs?.source}}},InferredMutationName.parameters={...InferredMutationName.parameters,docs:{...InferredMutationName.parameters?.docs,source:{originalSource:"{\n  args: {\n    schema: userSchema,\n    options: {\n      variables: {\n        name: 'John Doe',\n        email: 'john@example.com'\n      }\n    },\n    expectedOutput: `mutation($name: String!, $email: String!) {\n  user(name: $name, email: $email) {\n    id\n    name\n    email\n    age\n    isActive\n    address {\n      street\n      city\n      state\n      zipCode\n      country\n    }\n  }\n}`\n  }\n}",...InferredMutationName.parameters?.docs?.source}}},LimitedDepthMutation.parameters={...LimitedDepthMutation.parameters,docs:{...LimitedDepthMutation.parameters?.docs,source:{originalSource:"{\n  args: {\n    schema: userSchema,\n    options: {\n      operationName: 'CreateUser',\n      variables: {\n        userData: {\n          name: 'John Doe',\n          email: 'john@example.com',\n          address: {\n            street: '123 Main St',\n            city: 'Anytown',\n            state: 'ST',\n            zipCode: '12345'\n          }\n        }\n      },\n      maxDepth: 3\n    },\n    expectedOutput: `mutation CreateUser($userData: UserDataInput!) {\n  user(userData: $userData) {\n    id\n    name\n    email\n    age\n    isActive\n    address {\n      street\n      city\n      state\n      zipCode\n      country\n    }\n  }\n}`\n  }\n}",...LimitedDepthMutation.parameters?.docs?.source}}}},"./src/mutation.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{W:()=>createMutation,n:()=>processMutation});var _index__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/index.ts");function processMutation(schema,options={}){const{operationName,variables,maxDepth=10,inputTypeMap}=options,operation=operationName?` ${operationName}`:"",varsString=((variables,inputTypeMap)=>variables&&0!==Object.keys(variables).length?`(${Object.entries(variables).map((([key,value])=>{if(inputTypeMap&&inputTypeMap[key])return`$${key}: ${inputTypeMap[key]}!`;let type="String";return"number"==typeof value?type="Int":"boolean"==typeof value?type="Boolean":"object"==typeof value&&null!==value&&(type=`${key.charAt(0).toUpperCase()+key.slice(1)}Input`),`$${key}: ${type}!`})).join(", ")})`:"")(variables,inputTypeMap),fieldArgs=(0,_index__WEBPACK_IMPORTED_MODULE_0__.ON)(variables),mutationField=(0,_index__WEBPACK_IMPORTED_MODULE_0__.Jf)(schema,operationName);return`${_index__WEBPACK_IMPORTED_MODULE_0__.Nt.Mutation}${operation}${varsString} {\n  ${mutationField}${fieldArgs} {\n${(0,_index__WEBPACK_IMPORTED_MODULE_0__.fO)(schema,_index__WEBPACK_IMPORTED_MODULE_0__.Nt.Mutation,options,2)}  }\n}`}function createMutation(schema,options={}){return schema.toGQL(_index__WEBPACK_IMPORTED_MODULE_0__.Nt.Mutation,options)}},"./src/query.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{O:()=>processQuery,V:()=>createQuery});var _index__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/index.ts"),console=__webpack_require__("./node_modules/console-browserify/index.js");function processQuery(schema,options={}){const{operationName,variables,maxDepth=10}=options,operation=operationName?` ${operationName}`:"",varsString=(0,_index__WEBPACK_IMPORTED_MODULE_0__.Hh)(variables,options.inputTypeMap),fieldArgs=(0,_index__WEBPACK_IMPORTED_MODULE_0__.ON)(variables),queryField=(0,_index__WEBPACK_IMPORTED_MODULE_0__.Jf)(schema,operationName);return console.log(operation,varsString,fieldArgs,queryField),`${_index__WEBPACK_IMPORTED_MODULE_0__.Nt.Query}${operation}${varsString} {\n  ${queryField}${fieldArgs} {\n${(0,_index__WEBPACK_IMPORTED_MODULE_0__.fO)(schema,_index__WEBPACK_IMPORTED_MODULE_0__.Nt.Query,options,2)}  }\n}`}function createQuery(schema,options={}){return schema.toGQL(_index__WEBPACK_IMPORTED_MODULE_0__.Nt.Query,options)}},"./src/subscription.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{K:()=>createSubscription,d:()=>processSubscription});var _index__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/index.ts");function processSubscription(schema,options={}){const{operationName,variables,maxDepth=10}=options,operation=operationName?` ${operationName}`:"",varsString=(0,_index__WEBPACK_IMPORTED_MODULE_0__.Hh)(variables,options.inputTypeMap),fieldArgs=(0,_index__WEBPACK_IMPORTED_MODULE_0__.ON)(variables),subscriptionField=(0,_index__WEBPACK_IMPORTED_MODULE_0__.Jf)(schema,operationName);return`${_index__WEBPACK_IMPORTED_MODULE_0__.Nt.Subscription}${operation}${varsString} {\n  ${subscriptionField}${fieldArgs} {\n${(0,_index__WEBPACK_IMPORTED_MODULE_0__.fO)(schema,_index__WEBPACK_IMPORTED_MODULE_0__.Nt.Subscription,options,2)}  }\n}`}function createSubscription(schema,options={}){return schema.toGQL(_index__WEBPACK_IMPORTED_MODULE_0__.Nt.Subscription,options)}}}]);