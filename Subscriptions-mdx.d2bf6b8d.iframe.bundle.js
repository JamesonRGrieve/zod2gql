(self.webpackChunkzod2gql=self.webpackChunkzod2gql||[]).push([[417,860],{"./docs/Subscriptions.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>MDXContent});__webpack_require__("./node_modules/next/dist/compiled/react/index.js");var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/next/dist/compiled/react/jsx-runtime.js"),C_Users_Jameson_Source_AGI_aginterface_src_lib_zod2gql_node_modules_storybook_addon_docs_dist_shims_mdx_react_shim_mjs__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/@mdx-js/react/lib/index.js"),_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@storybook/addon-docs/dist/index.mjs"),_src_subscription_stories__WEBPACK_IMPORTED_MODULE_5__=(__webpack_require__("./src/index.ts"),__webpack_require__("./src/subscription.ts"),__webpack_require__("./src/subscription.stories.tsx"));function _createMdxContent(props){const _components={code:"code",h1:"h1",h2:"h2",p:"p",...(0,C_Users_Jameson_Source_AGI_aginterface_src_lib_zod2gql_node_modules_storybook_addon_docs_dist_shims_mdx_react_shim_mjs__WEBPACK_IMPORTED_MODULE_6__.R)(),...props.components};return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__.W8,{title:"Documentation/Subscriptions",of:_src_subscription_stories__WEBPACK_IMPORTED_MODULE_5__}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h1,{id:"graphql-subscriptions",children:"GraphQL Subscriptions"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["Learn how to generate GraphQL subscriptions from Zod schemas using ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"zod2gql"}),"."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"basic-subscription-generation",children:"Basic Subscription Generation"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["Create a simple GraphQL subscription using the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"createSubscription"})," helper function:"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__.kL,{language:"typescript",dark:!0,format:!0,code:"\nimport { z } from 'zod';\nimport { createSubscription } from 'zod2gql';\n\nconst notificationSchema = z.object({\n  id: z.string(),\n  type: z.string(),\n  message: z.string(),\n  timestamp: z.string(),\n  read: z.boolean(),\n});\n\nconst subscription = createSubscription(notificationSchema, {\n  operationName: 'SubscribeUserNotifications',\n  variables: { userId: 'user123' }\n});\n\nconsole.log(subscription);\n/* Output:\nsubscription SubscribeUserNotifications($userId: String!) {\n  userNotifications(userId: $userId) {\n    id\n    type\n    message\n    timestamp\n    read\n  }\n}\n*/\n  "}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"real-time-data-subscriptions",children:"Real-time Data Subscriptions"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Subscriptions are often used for real-time data updates:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__.kL,{language:"typescript",dark:!0,format:!0,code:"\nconst userPresenceSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  status: z.enum(['online', 'away', 'offline']),\n  lastSeen: z.string(),\n  typing: z.boolean(),\n});\n\nconst subscription = createSubscription(userPresenceSchema, {\n  operationName: 'SubscribeUserPresence',\n  variables: { roomId: 'room123' }\n});\n\nconsole.log(subscription);\n/* Output:\nsubscription SubscribeUserPresence($roomId: String!) {\n  userPresence(roomId: $roomId) {\n    id\n    name\n    status\n    lastSeen\n    typing\n  }\n}\n*/\n  "}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"complex-data-structures-in-subscriptions",children:"Complex Data Structures in Subscriptions"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Subscriptions can handle complex nested data structures:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__.kL,{language:"typescript",dark:!0,format:!0,code:"\nconst messageAuthorSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  avatarUrl: z.string().optional(),\n});\n\nconst chatMessageSchema = z.object({\n  id: z.string(),\n  content: z.string(),\n  author: messageAuthorSchema,\n  timestamp: z.string(),\n  roomId: z.string(),\n  edited: z.boolean().default(false),\n  reactions: z.record(z.string(), z.number()).optional(),\n});\n\nconst subscription = createSubscription(chatMessageSchema, {\n  operationName: 'SubscribeChatRoom',\n  variables: { roomId: 'room123' }\n});\n\nconsole.log(subscription);\n/* Output:\nsubscription SubscribeChatRoom($roomId: String!) {\n  chatRoom(roomId: $roomId) {\n    id\n    content\n    author {\n      id\n      name\n      avatarUrl\n    }\n    timestamp\n    roomId\n    edited\n    reactions\n  }\n}\n*/\n  "}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"event-based-subscriptions",children:"Event-Based Subscriptions"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Subscriptions are perfect for event-based data:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__.kL,{language:"typescript",dark:!0,format:!0,code:"\nconst commentEventSchema = z.object({\n  id: z.string(),\n  postId: z.string(),\n  eventType: z.enum(['created', 'updated', 'deleted', 'reaction_added']),\n  timestamp: z.string(),\n  comment: z.object({\n    id: z.string(),\n    content: z.string(),\n    author: z.object({\n      id: z.string(),\n      name: z.string()\n    }),\n    createdAt: z.string(),\n  }).optional(),\n});\n\nconst subscription = createSubscription(commentEventSchema, {\n  operationName: 'SubscribeCommentEvents',\n  variables: { postId: 'post123' }\n});\n\nconsole.log(subscription);\n/* Output:\nsubscription SubscribeCommentEvents($postId: String!) {\n  commentEvents(postId: $postId) {\n    id\n    postId\n    eventType\n    timestamp\n    comment {\n      id\n      content\n      author {\n        id\n        name\n      }\n      createdAt\n    }\n  }\n}\n*/\n  "}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"multiple-subscriptions",children:"Multiple Subscriptions"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"You can create multiple subscriptions in a single operation by composing schemas:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__.kL,{language:"typescript",dark:!0,format:!0,code:"\nconst combinedSchema = z.object({\n  userPresence: userPresenceSchema,\n  notifications: notificationSchema,\n  chatMessages: chatMessageSchema,\n});\n\nconst subscription = createSubscription(combinedSchema, {\n  operationName: 'MultiSubscription',\n  variables: { \n    userId: 'user123',\n    roomId: 'room456'\n  }\n});\n\nconsole.log(subscription);\n/* Output:\nsubscription MultiSubscription($userId: String!, $roomId: String!) {\n  multiSubscription(userId: $userId, roomId: $roomId) {\n    userPresence {\n      id\n      name\n      status\n      lastSeen\n      typing\n    }\n    notifications {\n      id\n      type\n      message\n      timestamp\n      read\n    }\n    chatMessages {\n      id\n      content\n      author {\n        id\n        name\n        avatarUrl\n      }\n      timestamp\n      roomId\n      edited\n      reactions\n    }\n  }\n}\n*/\n  "}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"controlling-subscription-depth",children:"Controlling Subscription Depth"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Like queries and mutations, you can control the depth of subscription fields:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__.kL,{language:"typescript",dark:!0,format:!0,code:"\nconst subscription = createSubscription(chatMessageSchema, {\n  operationName: 'SubscribeChatRoom',\n  variables: { roomId: 'room123' },\n  maxDepth: 2 // Limit recursion depth\n});\n\nconsole.log(subscription);\n/* Output:\nsubscription SubscribeChatRoom($roomId: String!) {\n  chatRoom(roomId: $roomId) {\n    id\n    content\n    author\n    timestamp\n    roomId\n    edited\n    reactions\n  }\n}\n*/\n  "}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"live-examples",children:"Live Examples"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__.Hl,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__.gG,{id:"graphql-subscription--user-notifications"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__.Hl,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__.gG,{id:"graphql-subscription--chat-room-messages"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__.Hl,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__.gG,{id:"graphql-subscription--inferred-subscription-operation"})})]})}function MDXContent(props={}){const{wrapper:MDXLayout}={...(0,C_Users_Jameson_Source_AGI_aginterface_src_lib_zod2gql_node_modules_storybook_addon_docs_dist_shims_mdx_react_shim_mjs__WEBPACK_IMPORTED_MODULE_6__.R)(),...props.components};return MDXLayout?(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(MDXLayout,{...props,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_createMdxContent,{...props})}):_createMdxContent(props)}},"./node_modules/@mdx-js/react/lib/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{R:()=>useMDXComponents,x:()=>MDXProvider});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/next/dist/compiled/react/index.js");const emptyComponents={},MDXContext=react__WEBPACK_IMPORTED_MODULE_0__.createContext(emptyComponents);function useMDXComponents(components){const contextComponents=react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext);return react__WEBPACK_IMPORTED_MODULE_0__.useMemo((function(){return"function"==typeof components?components(contextComponents):{...contextComponents,...components}}),[contextComponents,components])}function MDXProvider(properties){let allComponents;return allComponents=properties.disableParentContext?"function"==typeof properties.components?properties.components(emptyComponents):properties.components||emptyComponents:useMDXComponents(properties.components),react__WEBPACK_IMPORTED_MODULE_0__.createElement(MDXContext.Provider,{value:allComponents},properties.children)}},"./node_modules/@storybook/addon-docs/dist/index.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{Hl:()=>_storybook_blocks__WEBPACK_IMPORTED_MODULE_4__.Hl,W8:()=>_storybook_blocks__WEBPACK_IMPORTED_MODULE_4__.W8,gG:()=>_storybook_blocks__WEBPACK_IMPORTED_MODULE_4__.gG,kL:()=>_storybook_blocks__WEBPACK_IMPORTED_MODULE_4__.kL});__webpack_require__("./node_modules/@storybook/addon-docs/dist/chunk-PRSJUHPQ.mjs"),__webpack_require__("./node_modules/@storybook/addon-docs/dist/chunk-NUUEMKO5.mjs"),__webpack_require__("./node_modules/@storybook/addon-docs/dist/chunk-H6MOWX77.mjs"),__webpack_require__("storybook/internal/preview-api");var _storybook_blocks__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs")},"./node_modules/@storybook/blocks/dist sync recursive":module=>{function webpackEmptyContext(req){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}webpackEmptyContext.keys=()=>[],webpackEmptyContext.resolve=webpackEmptyContext,webpackEmptyContext.id="./node_modules/@storybook/blocks/dist sync recursive",module.exports=webpackEmptyContext},"./node_modules/@storybook/core/dist/components sync recursive":module=>{function webpackEmptyContext(req){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}webpackEmptyContext.keys=()=>[],webpackEmptyContext.resolve=webpackEmptyContext,webpackEmptyContext.id="./node_modules/@storybook/core/dist/components sync recursive",module.exports=webpackEmptyContext},"./node_modules/@storybook/core/dist/theming sync recursive":module=>{function webpackEmptyContext(req){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}webpackEmptyContext.keys=()=>[],webpackEmptyContext.resolve=webpackEmptyContext,webpackEmptyContext.id="./node_modules/@storybook/core/dist/theming sync recursive",module.exports=webpackEmptyContext},"./src/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{Hh:()=>formatVariablesDeclaration,Jf:()=>getOperationFieldName,Nt:()=>GQLType,ON:()=>formatFieldArguments,fO:()=>processFields});var zod__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/zod/lib/index.mjs"),_mutation__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/mutation.ts"),_query__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/query.ts"),_subscription__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/subscription.ts"),GQLType=function(GQLType){return GQLType.Query="query",GQLType.Mutation="mutation",GQLType.Subscription="subscription",GQLType}({});const getOperationFieldName=(schema,operationName)=>{if(operationName){let fieldName=operationName;const prefixes=["Get","Create","Update","Delete","Subscribe"];for(const prefix of prefixes)if(fieldName.startsWith(prefix)){fieldName=fieldName.substring(prefix.length);break}return fieldName.charAt(0).toLowerCase()+fieldName.slice(1)}{const typeName=schema._def.typeName||"";return typeName?typeName.charAt(0).toLowerCase()+typeName.slice(1):""}},formatVariablesDeclaration=(variables,inputTypeMap)=>variables&&0!==Object.keys(variables).length?`(${Object.entries(variables).map((([key,value])=>{if(inputTypeMap&&inputTypeMap[key])return`$${key}: ${inputTypeMap[key]}!`;let type="String";return"number"==typeof value&&(type="Int"),"boolean"==typeof value&&(type="Boolean"),"object"==typeof value&&null!==value&&(type=`${key.charAt(0).toUpperCase()+key.slice(1)}Input`),`$${key}: ${type}!`})).join(", ")})`:"",formatFieldArguments=variables=>variables&&0!==Object.keys(variables).length?`(${Object.entries(variables).map((([key])=>`${key}: $${key}`)).join(", ")})`:"",processFields=(schema,queryType,options={},depth=0)=>{const{maxDepth=10}=options;if(depth>maxDepth)return"";const indent="  ".repeat(depth);let query="";const shape=schema._def.shape();for(const[key,value]of Object.entries(shape)){const processSchema=(schema,fieldName)=>{if(schema instanceof zod__WEBPACK_IMPORTED_MODULE_3__.z.ZodObject)query+=`${indent}${fieldName} {\n${processFields(schema,queryType,options,depth+1)}${indent}}\n`;else if(schema instanceof zod__WEBPACK_IMPORTED_MODULE_3__.z.ZodArray){const elementType=schema._def.type;elementType&&"object"==typeof elementType&&"toJSON"in elementType?processSchema(elementType,fieldName):query+=`${indent}${fieldName}\n`}else if(schema instanceof zod__WEBPACK_IMPORTED_MODULE_3__.z.ZodLazy){const innerType=schema._def.getter();innerType&&"object"==typeof innerType&&"toJSON"in innerType?processSchema(innerType,fieldName):query+=`${indent}${fieldName}\n`}else if(schema instanceof zod__WEBPACK_IMPORTED_MODULE_3__.z.ZodOptional||schema instanceof zod__WEBPACK_IMPORTED_MODULE_3__.z.ZodNullable){const innerType=schema._def.innerType;innerType&&"object"==typeof innerType&&"toJSON"in innerType?processSchema(innerType,fieldName):query+=`${indent}${fieldName}\n`}else schema instanceof zod__WEBPACK_IMPORTED_MODULE_3__.z.ZodUnion||zod__WEBPACK_IMPORTED_MODULE_3__.z.ZodEnum,query+=`${indent}${fieldName}\n`};value&&"object"==typeof value&&"toJSON"in value?processSchema(value,key):query+=`${indent}${key}\n`}return query};zod__WEBPACK_IMPORTED_MODULE_3__.z.ZodObject.prototype.toGQL=function(queryType="query",options={},depth=0){if(depth>0)return processFields(this,queryType,options,depth);switch(queryType){case"query":return(0,_query__WEBPACK_IMPORTED_MODULE_1__.O)(this,options);case"mutation":return(0,_mutation__WEBPACK_IMPORTED_MODULE_0__.n)(this,options);case"subscription":return(0,_subscription__WEBPACK_IMPORTED_MODULE_2__.d)(this,options);default:return""}}},"./src/mutation.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{W:()=>createMutation,n:()=>processMutation});var _index__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/index.ts");function processMutation(schema,options={}){const{operationName,variables,maxDepth=10,inputTypeMap}=options,operation=operationName?` ${operationName}`:"",varsString=((variables,inputTypeMap)=>variables&&0!==Object.keys(variables).length?`(${Object.entries(variables).map((([key,value])=>{if(inputTypeMap&&inputTypeMap[key])return`$${key}: ${inputTypeMap[key]}!`;let type="String";return"number"==typeof value?type="Int":"boolean"==typeof value?type="Boolean":"object"==typeof value&&null!==value&&(type=`${key.charAt(0).toUpperCase()+key.slice(1)}Input`),`$${key}: ${type}!`})).join(", ")})`:"")(variables,inputTypeMap),fieldArgs=(0,_index__WEBPACK_IMPORTED_MODULE_0__.ON)(variables),mutationField=(0,_index__WEBPACK_IMPORTED_MODULE_0__.Jf)(schema,operationName);return`${_index__WEBPACK_IMPORTED_MODULE_0__.Nt.Mutation}${operation}${varsString} {\n  ${mutationField}${fieldArgs} {\n${(0,_index__WEBPACK_IMPORTED_MODULE_0__.fO)(schema,_index__WEBPACK_IMPORTED_MODULE_0__.Nt.Mutation,options,2)}  }\n}`}function createMutation(schema,options={}){return schema.toGQL(_index__WEBPACK_IMPORTED_MODULE_0__.Nt.Mutation,options)}},"./src/query.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{O:()=>processQuery,V:()=>createQuery});var _index__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/index.ts");function processQuery(schema,options={}){const{operationName,variables,maxDepth=10}=options,operation=operationName?` ${operationName}`:"",varsString=(0,_index__WEBPACK_IMPORTED_MODULE_0__.Hh)(variables,options.inputTypeMap),fieldArgs=(0,_index__WEBPACK_IMPORTED_MODULE_0__.ON)(variables),queryField=(0,_index__WEBPACK_IMPORTED_MODULE_0__.Jf)(schema,operationName);return`${_index__WEBPACK_IMPORTED_MODULE_0__.Nt.Query}${operation}${varsString} {\n  ${queryField}${fieldArgs} {\n${(0,_index__WEBPACK_IMPORTED_MODULE_0__.fO)(schema,_index__WEBPACK_IMPORTED_MODULE_0__.Nt.Query,options,2)}  }\n}`}function createQuery(schema,options={}){return schema.toGQL(_index__WEBPACK_IMPORTED_MODULE_0__.Nt.Query,options)}},"./src/subscription.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{ActivityEventsSubscription:()=>ActivityEventsSubscription,ChatRoomMessagesSubscription:()=>ChatRoomMessagesSubscription,CommentEventsSubscription:()=>CommentEventsSubscription,InferredSubscriptionOperation:()=>InferredSubscriptionOperation,LimitedDepthSubscription:()=>LimitedDepthSubscription,MultipleSubscriptions:()=>MultipleSubscriptions,SensorDataSubscription:()=>SensorDataSubscription,StockTickerSubscription:()=>StockTickerSubscription,UserNotificationsSubscription:()=>UserNotificationsSubscription,UserPresenceSubscription:()=>UserPresenceSubscription,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/next/dist/compiled/react/jsx-runtime.js"),_storybook_test__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@storybook/test/dist/index.mjs"),zod__WEBPACK_IMPORTED_MODULE_5__=(__webpack_require__("./node_modules/next/dist/compiled/react/index.js"),__webpack_require__("./node_modules/zod/lib/index.mjs")),_subscription__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/subscription.ts");__webpack_require__("./src/index.ts");const withTypeName=(schema,name)=>(schema._def.typeName=name,schema),__WEBPACK_DEFAULT_EXPORT__={title:"GraphQL/Subscription",component:({schema,options,expectedOutput})=>{const subscription=(0,_subscription__WEBPACK_IMPORTED_MODULE_3__.K)(schema,options);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("div",{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("h3",{children:"Generated GraphQL Subscription"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("pre",{"data-testid":"subscription-output",children:subscription}),expectedOutput&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("h3",{children:"Expected Output"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("pre",{"data-testid":"expected-output",children:expectedOutput})]})]})},parameters:{docs:{description:{component:"Generate GraphQL subscriptions from Zod schemas. See the [Subscriptions documentation](/?path=/docs/documentation-subscriptions--docs) for more details."},source:{type:"dynamic",excludeDecorators:!0}}}},userPresenceSchema=withTypeName(zod__WEBPACK_IMPORTED_MODULE_5__.z.object({id:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),name:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),avatarUrl:zod__WEBPACK_IMPORTED_MODULE_5__.z.string().optional(),status:zod__WEBPACK_IMPORTED_MODULE_5__.z.enum(["online","away","offline"]),lastSeen:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),typing:zod__WEBPACK_IMPORTED_MODULE_5__.z.boolean().optional(),currentRoomId:zod__WEBPACK_IMPORTED_MODULE_5__.z.string().optional()}),"UserPresence"),notificationSchema=withTypeName(zod__WEBPACK_IMPORTED_MODULE_5__.z.object({id:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),type:zod__WEBPACK_IMPORTED_MODULE_5__.z.enum(["info","success","warning","error"]),title:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),message:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),timestamp:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),read:zod__WEBPACK_IMPORTED_MODULE_5__.z.boolean(),userId:zod__WEBPACK_IMPORTED_MODULE_5__.z.string()}),"Notification"),messageAuthorSchema=withTypeName(zod__WEBPACK_IMPORTED_MODULE_5__.z.object({id:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),name:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),avatarUrl:zod__WEBPACK_IMPORTED_MODULE_5__.z.string().optional()}),"MessageAuthor"),chatAttachmentSchema=withTypeName(zod__WEBPACK_IMPORTED_MODULE_5__.z.object({id:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),url:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),fileName:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),fileType:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),fileSize:zod__WEBPACK_IMPORTED_MODULE_5__.z.number(),thumbnailUrl:zod__WEBPACK_IMPORTED_MODULE_5__.z.string().optional()}),"ChatAttachment"),chatMessageSchema=withTypeName(zod__WEBPACK_IMPORTED_MODULE_5__.z.object({id:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),content:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),author:messageAuthorSchema,timestamp:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),roomId:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),edited:zod__WEBPACK_IMPORTED_MODULE_5__.z.boolean().default(!1),reactions:zod__WEBPACK_IMPORTED_MODULE_5__.z.record(zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),zod__WEBPACK_IMPORTED_MODULE_5__.z.number()).optional(),attachments:zod__WEBPACK_IMPORTED_MODULE_5__.z.array(chatAttachmentSchema).optional(),mentions:zod__WEBPACK_IMPORTED_MODULE_5__.z.array(zod__WEBPACK_IMPORTED_MODULE_5__.z.string()).optional()}),"ChatMessage"),activityEventSchema=withTypeName(zod__WEBPACK_IMPORTED_MODULE_5__.z.object({id:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),userId:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),eventType:zod__WEBPACK_IMPORTED_MODULE_5__.z.enum(["page_view","button_click","form_submit","error"]),resourceId:zod__WEBPACK_IMPORTED_MODULE_5__.z.string().optional(),resourceType:zod__WEBPACK_IMPORTED_MODULE_5__.z.string().optional(),timestamp:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),metadata:zod__WEBPACK_IMPORTED_MODULE_5__.z.record(zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),zod__WEBPACK_IMPORTED_MODULE_5__.z.union([zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),zod__WEBPACK_IMPORTED_MODULE_5__.z.number(),zod__WEBPACK_IMPORTED_MODULE_5__.z.boolean()])).optional(),ipAddress:zod__WEBPACK_IMPORTED_MODULE_5__.z.string().optional(),userAgent:zod__WEBPACK_IMPORTED_MODULE_5__.z.string().optional(),sessionId:zod__WEBPACK_IMPORTED_MODULE_5__.z.string()}),"ActivityEvent"),stockTickerSchema=withTypeName(zod__WEBPACK_IMPORTED_MODULE_5__.z.object({symbol:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),price:zod__WEBPACK_IMPORTED_MODULE_5__.z.number(),change:zod__WEBPACK_IMPORTED_MODULE_5__.z.number(),changePercent:zod__WEBPACK_IMPORTED_MODULE_5__.z.number(),volume:zod__WEBPACK_IMPORTED_MODULE_5__.z.number(),timestamp:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),open:zod__WEBPACK_IMPORTED_MODULE_5__.z.number(),high:zod__WEBPACK_IMPORTED_MODULE_5__.z.number(),low:zod__WEBPACK_IMPORTED_MODULE_5__.z.number(),previousClose:zod__WEBPACK_IMPORTED_MODULE_5__.z.number()}),"StockTicker"),sensorDataSchema=withTypeName(zod__WEBPACK_IMPORTED_MODULE_5__.z.object({sensorId:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),deviceId:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),type:zod__WEBPACK_IMPORTED_MODULE_5__.z.enum(["temperature","humidity","pressure","light","motion"]),value:zod__WEBPACK_IMPORTED_MODULE_5__.z.number(),unit:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),timestamp:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),batteryLevel:zod__WEBPACK_IMPORTED_MODULE_5__.z.number().optional(),status:zod__WEBPACK_IMPORTED_MODULE_5__.z.enum(["normal","warning","alert","error"]).optional(),location:zod__WEBPACK_IMPORTED_MODULE_5__.z.object({latitude:zod__WEBPACK_IMPORTED_MODULE_5__.z.number(),longitude:zod__WEBPACK_IMPORTED_MODULE_5__.z.number(),altitude:zod__WEBPACK_IMPORTED_MODULE_5__.z.number().optional()}).optional()}),"SensorData"),commentReactionSchema=withTypeName(zod__WEBPACK_IMPORTED_MODULE_5__.z.object({userId:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),reactionType:zod__WEBPACK_IMPORTED_MODULE_5__.z.enum(["like","love","laugh","wow","sad","angry"]),timestamp:zod__WEBPACK_IMPORTED_MODULE_5__.z.string()}),"CommentReaction"),commentEventSchema=withTypeName(zod__WEBPACK_IMPORTED_MODULE_5__.z.object({id:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),postId:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),eventType:zod__WEBPACK_IMPORTED_MODULE_5__.z.enum(["created","updated","deleted","reaction_added","reaction_removed"]),timestamp:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),actor:userPresenceSchema,comment:zod__WEBPACK_IMPORTED_MODULE_5__.z.object({id:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),content:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),parentId:zod__WEBPACK_IMPORTED_MODULE_5__.z.string().optional(),author:messageAuthorSchema,createdAt:zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),updatedAt:zod__WEBPACK_IMPORTED_MODULE_5__.z.string().optional(),reactions:zod__WEBPACK_IMPORTED_MODULE_5__.z.record(zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),zod__WEBPACK_IMPORTED_MODULE_5__.z.array(commentReactionSchema)).optional(),attachments:zod__WEBPACK_IMPORTED_MODULE_5__.z.array(chatAttachmentSchema).optional(),mentions:zod__WEBPACK_IMPORTED_MODULE_5__.z.array(zod__WEBPACK_IMPORTED_MODULE_5__.z.string()).optional()}).optional(),reaction:commentReactionSchema.optional()}),"CommentEvent"),UserPresenceSubscription={args:{schema:userPresenceSchema,options:{operationName:"SubscribeUserPresence",variables:{userId:"user123"}},expectedOutput:"subscription SubscribeUserPresence($userId: String!) {\n  userPresence(userId: $userId) {\n    id\n    name\n    avatarUrl\n    status\n    lastSeen\n    typing\n    currentRoomId\n  }\n}"},parameters:{docs:{description:{story:"A GraphQL subscription to track user presence status changes in real-time."},source:{type:"code"}}},play:async({canvasElement})=>{const canvas=(0,_storybook_test__WEBPACK_IMPORTED_MODULE_1__.ux)(canvasElement),subscriptionOutput=canvas.getByTestId("subscription-output"),expectedOutput=canvas.getByTestId("expected-output"),normalizeString=str=>str.replace(/\s+/g,"");(0,_storybook_test__WEBPACK_IMPORTED_MODULE_1__.E3)(normalizeString(subscriptionOutput.textContent||"")).toBe(normalizeString(expectedOutput.textContent||""))}},UserNotificationsSubscription={args:{schema:notificationSchema,options:{operationName:"SubscribeUserNotifications",variables:{userId:"user123"}},expectedOutput:"subscription SubscribeUserNotifications($userId: String!) {\n  userNotifications(userId: $userId) {\n    id\n    type\n    title\n    message\n    timestamp\n    read\n    userId\n  }\n}"}},ChatRoomMessagesSubscription={args:{schema:chatMessageSchema,options:{operationName:"SubscribeChatRoom",variables:{roomId:"room123"}},expectedOutput:"subscription SubscribeChatRoom($roomId: String!) {\n  chatRoom(roomId: $roomId) {\n    id\n    content\n    author {\n      id\n      name\n      avatarUrl\n    }\n    timestamp\n    roomId\n    edited\n    reactions\n    attachments {\n      id\n      url\n      fileName\n      fileType\n      fileSize\n      thumbnailUrl\n    }\n    mentions\n  }\n}"},parameters:{docs:{description:{story:"A GraphQL subscription for real-time chat messages with nested author details and message attachments."},source:{type:"code"}}}},ActivityEventsSubscription={args:{schema:activityEventSchema,options:{operationName:"SubscribeActivityEvents",variables:{userId:"user123",sessionId:"session456"}},expectedOutput:"subscription SubscribeActivityEvents($userId: String!, $sessionId: String!) {\n  activityEvents(userId: $userId, sessionId: $sessionId) {\n    id\n    userId\n    eventType\n    resourceId\n    resourceType\n    timestamp\n    metadata\n    ipAddress\n    userAgent\n    sessionId\n  }\n}"}},StockTickerSubscription={args:{schema:stockTickerSchema,options:{operationName:"SubscribeStockTicker",variables:{symbols:["AAPL","MSFT","GOOGL"]}},expectedOutput:"subscription SubscribeStockTicker($symbols: StringInput!) {\n  stockTicker(symbols: $symbols) {\n    symbol\n    price\n    change\n    changePercent\n    volume\n    timestamp\n    open\n    high\n    low\n    previousClose\n  }\n}"}},SensorDataSubscription={args:{schema:sensorDataSchema,options:{operationName:"SubscribeSensorData",variables:{deviceId:"device123",sensorTypes:["temperature","humidity"]}},expectedOutput:"subscription SubscribeSensorData($deviceId: String!, $sensorTypes: SensorTypesInput!) {\n  sensorData(deviceId: $deviceId, sensorTypes: $sensorTypes) {\n    sensorId\n    deviceId\n    type\n    value\n    unit\n    timestamp\n    batteryLevel\n    status\n    location {\n      latitude\n      longitude\n      altitude\n    }\n  }\n}"}},CommentEventsSubscription={args:{schema:commentEventSchema,options:{operationName:"SubscribeCommentEvents",variables:{postId:"post123"}}}},InferredSubscriptionOperation={args:{schema:userPresenceSchema,options:{variables:{userId:"user123"}},expectedOutput:"subscription($userId: String!) {\n  userPresence(userId: $userId) {\n    id\n    name\n    avatarUrl\n    status\n    lastSeen\n    typing\n    currentRoomId\n  }\n}"}},LimitedDepthSubscription={args:{schema:commentEventSchema,options:{operationName:"SubscribeCommentEvents",variables:{postId:"post123"},maxDepth:3},expectedOutput:"subscription SubscribeCommentEvents($postId: String!) {\n  commentEvents(postId: $postId) {\n    id\n    postId\n    eventType\n    timestamp\n    actor {\n      id\n      name\n      avatarUrl\n      status\n      lastSeen\n      typing\n      currentRoomId\n    }\n    comment {\n      id\n      content\n      parentId\n      author {\n        id\n        name\n        avatarUrl\n      }\n      createdAt\n      updatedAt\n      reactions\n      attachments\n      mentions\n    }\n    reaction {\n      userId\n      reactionType\n      timestamp\n    }\n  }\n}"}},MultipleSubscriptions={args:{schema:zod__WEBPACK_IMPORTED_MODULE_5__.z.object({userPresence:userPresenceSchema,notifications:notificationSchema,chatMessages:chatMessageSchema}),options:{operationName:"MultiSubscription",variables:{userId:"user123",roomId:"room456"}},expectedOutput:"subscription MultiSubscription($userId: String!, $roomId: String!) {\n  multiSubscription(userId: $userId, roomId: $roomId) {\n    userPresence {\n      id\n      name\n      avatarUrl\n      status\n      lastSeen\n      typing\n      currentRoomId\n    }\n    notifications {\n      id\n      type\n      title\n      message\n      timestamp\n      read\n      userId\n    }\n    chatMessages {\n      id\n      content\n      author {\n        id\n        name\n        avatarUrl\n      }\n      timestamp\n      roomId\n      edited\n      reactions\n      attachments {\n        id\n        url\n        fileName\n        fileType\n        fileSize\n        thumbnailUrl\n      }\n      mentions\n    }\n  }\n}"}},__namedExportsOrder=["UserPresenceSubscription","UserNotificationsSubscription","ChatRoomMessagesSubscription","ActivityEventsSubscription","StockTickerSubscription","SensorDataSubscription","CommentEventsSubscription","InferredSubscriptionOperation","LimitedDepthSubscription","MultipleSubscriptions"];UserPresenceSubscription.parameters={...UserPresenceSubscription.parameters,docs:{...UserPresenceSubscription.parameters?.docs,source:{originalSource:"{\n  args: {\n    schema: userPresenceSchema,\n    options: {\n      operationName: 'SubscribeUserPresence',\n      variables: {\n        userId: 'user123'\n      }\n    },\n    expectedOutput: `subscription SubscribeUserPresence($userId: String!) {\n  userPresence(userId: $userId) {\n    id\n    name\n    avatarUrl\n    status\n    lastSeen\n    typing\n    currentRoomId\n  }\n}`\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'A GraphQL subscription to track user presence status changes in real-time.'\n      },\n      source: {\n        type: 'code'\n      }\n    }\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n\n    // Get the generated output\n    const subscriptionOutput = canvas.getByTestId('subscription-output');\n    const expectedOutput = canvas.getByTestId('expected-output');\n\n    // Normalize strings (remove whitespace) for comparison\n    const normalizeString = (str: string) => str.replace(/\\s+/g, '');\n    expect(normalizeString(subscriptionOutput.textContent || '')).toBe(normalizeString(expectedOutput.textContent || ''));\n  }\n}",...UserPresenceSubscription.parameters?.docs?.source}}},UserNotificationsSubscription.parameters={...UserNotificationsSubscription.parameters,docs:{...UserNotificationsSubscription.parameters?.docs,source:{originalSource:"{\n  args: {\n    schema: notificationSchema,\n    options: {\n      operationName: 'SubscribeUserNotifications',\n      variables: {\n        userId: 'user123'\n      }\n    },\n    expectedOutput: `subscription SubscribeUserNotifications($userId: String!) {\n  userNotifications(userId: $userId) {\n    id\n    type\n    title\n    message\n    timestamp\n    read\n    userId\n  }\n}`\n  }\n}",...UserNotificationsSubscription.parameters?.docs?.source}}},ChatRoomMessagesSubscription.parameters={...ChatRoomMessagesSubscription.parameters,docs:{...ChatRoomMessagesSubscription.parameters?.docs,source:{originalSource:"{\n  args: {\n    schema: chatMessageSchema,\n    options: {\n      operationName: 'SubscribeChatRoom',\n      variables: {\n        roomId: 'room123'\n      }\n    },\n    expectedOutput: `subscription SubscribeChatRoom($roomId: String!) {\n  chatRoom(roomId: $roomId) {\n    id\n    content\n    author {\n      id\n      name\n      avatarUrl\n    }\n    timestamp\n    roomId\n    edited\n    reactions\n    attachments {\n      id\n      url\n      fileName\n      fileType\n      fileSize\n      thumbnailUrl\n    }\n    mentions\n  }\n}`\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'A GraphQL subscription for real-time chat messages with nested author details and message attachments.'\n      },\n      source: {\n        type: 'code'\n      }\n    }\n  }\n}",...ChatRoomMessagesSubscription.parameters?.docs?.source}}},ActivityEventsSubscription.parameters={...ActivityEventsSubscription.parameters,docs:{...ActivityEventsSubscription.parameters?.docs,source:{originalSource:"{\n  args: {\n    schema: activityEventSchema,\n    options: {\n      operationName: 'SubscribeActivityEvents',\n      variables: {\n        userId: 'user123',\n        sessionId: 'session456'\n      }\n    },\n    expectedOutput: `subscription SubscribeActivityEvents($userId: String!, $sessionId: String!) {\n  activityEvents(userId: $userId, sessionId: $sessionId) {\n    id\n    userId\n    eventType\n    resourceId\n    resourceType\n    timestamp\n    metadata\n    ipAddress\n    userAgent\n    sessionId\n  }\n}`\n  }\n}",...ActivityEventsSubscription.parameters?.docs?.source}}},StockTickerSubscription.parameters={...StockTickerSubscription.parameters,docs:{...StockTickerSubscription.parameters?.docs,source:{originalSource:"{\n  args: {\n    schema: stockTickerSchema,\n    options: {\n      operationName: 'SubscribeStockTicker',\n      variables: {\n        symbols: ['AAPL', 'MSFT', 'GOOGL']\n      }\n    },\n    expectedOutput: `subscription SubscribeStockTicker($symbols: StringInput!) {\n  stockTicker(symbols: $symbols) {\n    symbol\n    price\n    change\n    changePercent\n    volume\n    timestamp\n    open\n    high\n    low\n    previousClose\n  }\n}`\n  }\n}",...StockTickerSubscription.parameters?.docs?.source}}},SensorDataSubscription.parameters={...SensorDataSubscription.parameters,docs:{...SensorDataSubscription.parameters?.docs,source:{originalSource:"{\n  args: {\n    schema: sensorDataSchema,\n    options: {\n      operationName: 'SubscribeSensorData',\n      variables: {\n        deviceId: 'device123',\n        sensorTypes: ['temperature', 'humidity']\n      }\n    },\n    expectedOutput: `subscription SubscribeSensorData($deviceId: String!, $sensorTypes: SensorTypesInput!) {\n  sensorData(deviceId: $deviceId, sensorTypes: $sensorTypes) {\n    sensorId\n    deviceId\n    type\n    value\n    unit\n    timestamp\n    batteryLevel\n    status\n    location {\n      latitude\n      longitude\n      altitude\n    }\n  }\n}`\n  }\n}",...SensorDataSubscription.parameters?.docs?.source}}},CommentEventsSubscription.parameters={...CommentEventsSubscription.parameters,docs:{...CommentEventsSubscription.parameters?.docs,source:{originalSource:"{\n  args: {\n    schema: commentEventSchema,\n    options: {\n      operationName: 'SubscribeCommentEvents',\n      variables: {\n        postId: 'post123'\n      }\n    }\n  }\n}",...CommentEventsSubscription.parameters?.docs?.source}}},InferredSubscriptionOperation.parameters={...InferredSubscriptionOperation.parameters,docs:{...InferredSubscriptionOperation.parameters?.docs,source:{originalSource:"{\n  args: {\n    schema: userPresenceSchema,\n    options: {\n      variables: {\n        userId: 'user123'\n      }\n    },\n    expectedOutput: `subscription($userId: String!) {\n  userPresence(userId: $userId) {\n    id\n    name\n    avatarUrl\n    status\n    lastSeen\n    typing\n    currentRoomId\n  }\n}`\n  }\n}",...InferredSubscriptionOperation.parameters?.docs?.source}}},LimitedDepthSubscription.parameters={...LimitedDepthSubscription.parameters,docs:{...LimitedDepthSubscription.parameters?.docs,source:{originalSource:"{\n  args: {\n    schema: commentEventSchema,\n    options: {\n      operationName: 'SubscribeCommentEvents',\n      variables: {\n        postId: 'post123'\n      },\n      maxDepth: 3\n    },\n    expectedOutput: `subscription SubscribeCommentEvents($postId: String!) {\n  commentEvents(postId: $postId) {\n    id\n    postId\n    eventType\n    timestamp\n    actor {\n      id\n      name\n      avatarUrl\n      status\n      lastSeen\n      typing\n      currentRoomId\n    }\n    comment {\n      id\n      content\n      parentId\n      author {\n        id\n        name\n        avatarUrl\n      }\n      createdAt\n      updatedAt\n      reactions\n      attachments\n      mentions\n    }\n    reaction {\n      userId\n      reactionType\n      timestamp\n    }\n  }\n}`\n  }\n}",...LimitedDepthSubscription.parameters?.docs?.source}}},MultipleSubscriptions.parameters={...MultipleSubscriptions.parameters,docs:{...MultipleSubscriptions.parameters?.docs,source:{originalSource:"{\n  args: {\n    schema: z.object({\n      userPresence: userPresenceSchema,\n      notifications: notificationSchema,\n      chatMessages: chatMessageSchema\n    }),\n    options: {\n      operationName: 'MultiSubscription',\n      variables: {\n        userId: 'user123',\n        roomId: 'room456'\n      }\n    },\n    expectedOutput: `subscription MultiSubscription($userId: String!, $roomId: String!) {\n  multiSubscription(userId: $userId, roomId: $roomId) {\n    userPresence {\n      id\n      name\n      avatarUrl\n      status\n      lastSeen\n      typing\n      currentRoomId\n    }\n    notifications {\n      id\n      type\n      title\n      message\n      timestamp\n      read\n      userId\n    }\n    chatMessages {\n      id\n      content\n      author {\n        id\n        name\n        avatarUrl\n      }\n      timestamp\n      roomId\n      edited\n      reactions\n      attachments {\n        id\n        url\n        fileName\n        fileType\n        fileSize\n        thumbnailUrl\n      }\n      mentions\n    }\n  }\n}`\n  }\n}",...MultipleSubscriptions.parameters?.docs?.source}}}},"./src/subscription.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{K:()=>createSubscription,d:()=>processSubscription});var _index__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/index.ts");function processSubscription(schema,options={}){const{operationName,variables,maxDepth=10}=options,operation=operationName?` ${operationName}`:"",varsString=(0,_index__WEBPACK_IMPORTED_MODULE_0__.Hh)(variables,options.inputTypeMap),fieldArgs=(0,_index__WEBPACK_IMPORTED_MODULE_0__.ON)(variables),subscriptionField=(0,_index__WEBPACK_IMPORTED_MODULE_0__.Jf)(schema,operationName);return`${_index__WEBPACK_IMPORTED_MODULE_0__.Nt.Subscription}${operation}${varsString} {\n  ${subscriptionField}${fieldArgs} {\n${(0,_index__WEBPACK_IMPORTED_MODULE_0__.fO)(schema,_index__WEBPACK_IMPORTED_MODULE_0__.Nt.Subscription,options,2)}  }\n}`}function createSubscription(schema,options={}){return schema.toGQL(_index__WEBPACK_IMPORTED_MODULE_0__.Nt.Subscription,options)}}}]);