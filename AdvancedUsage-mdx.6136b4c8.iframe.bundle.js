(self.webpackChunkzod2gql=self.webpackChunkzod2gql||[]).push([[844],{"./docs/AdvancedUsage.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>MDXContent});__webpack_require__("./node_modules/next/dist/compiled/react/index.js");var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/next/dist/compiled/react/jsx-runtime.js"),C_Users_Jameson_Source_AGI_aginterface_src_lib_zod2gql_node_modules_storybook_addon_docs_dist_shims_mdx_react_shim_mjs__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./node_modules/@mdx-js/react/lib/index.js"),_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@storybook/addon-docs/dist/index.mjs");__webpack_require__("./src/index.ts"),__webpack_require__("./src/mutation.ts"),__webpack_require__("./src/query.ts"),__webpack_require__("./src/subscription.ts");function _createMdxContent(props){const _components={code:"code",h1:"h1",h2:"h2",li:"li",p:"p",ul:"ul",...(0,C_Users_Jameson_Source_AGI_aginterface_src_lib_zod2gql_node_modules_storybook_addon_docs_dist_shims_mdx_react_shim_mjs__WEBPACK_IMPORTED_MODULE_7__.R)(),...props.components};return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__.W8,{title:"Documentation/Advanced Usage"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h1,{id:"advanced-usage",children:"Advanced Usage"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["Discover advanced techniques and features of ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"zod2gql"})," to handle complex GraphQL generation scenarios."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"type-name-inference",children:"Type Name Inference"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"You can add a type name to your Zod schema to enable automatic field name inference:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__.kL,{language:"typescript",dark:!0,format:!0,code:"\nimport { z } from 'zod';\nimport { createQuery } from 'zod2gql';\n\n// Helper function to add a type name to a schema\nconst withTypeName = (schema, name) => {\n  (schema as any)._def.typeName = name;\n  return schema;\n};\n\n// Create a schema with a type name\nconst productSchema = withTypeName(\n  z.object({\n    id: z.string(),\n    name: z.string(),\n    price: z.number(),\n  }),\n  'Product'\n);\n\n// No need to specify operationName - it will be inferred from the type name\nconst query = createQuery(productSchema, {\n  variables: { id: 'prod123' }\n});\n\nconsole.log(query);\n/* Output:\nquery($id: String!) {\n  product(id: $id) {\n    id\n    name\n    price\n  }\n}\n*/\n  "}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"working-with-array-schemas-and-pluralization",children:"Working with Array Schemas and Pluralization"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"The library automatically pluralizes field names when working with array schemas:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__.kL,{language:"typescript",dark:!0,format:!0,code:"\nimport { z } from 'zod';\nimport { GQLType } from 'zod2gql';\n\n// Create a schema with a type name\nconst productSchema = withTypeName(\n  z.object({\n    id: z.string(),\n    name: z.string(),\n    price: z.number(),\n  }),\n  'Product'\n);\n\n// Create an array schema for querying multiple products\nconst productsQuery = z.array(productSchema).toGQL(GQLType.Query, {\n  variables: { \n    category: 'electronics',\n    limit: 20,\n    sortBy: 'price'\n  }\n});\n\nconsole.log(productsQuery);\n/* Output:\nquery($category: String!, $limit: Int!, $sortBy: String!) {\n  products(category: $category, limit: $limit, sortBy: $sortBy) {\n    id\n    name\n    price\n  }\n}\n*/\n\n// For bulk operations\nconst bulkCreateMutation = z.array(productSchema).toGQL(GQLType.Mutation, {\n  variables: {\n    products: [\n      { name: 'Laptop', price: 999.99 },\n      { name: 'Phone', price: 599.99 }\n    ]\n  },\n  inputTypeMap: {\n    products: '[ProductInput!]'\n  }\n});\n\nconsole.log(bulkCreateMutation);\n/* Output:\nmutation($products: [ProductInput!]!) {\n  createProducts(products: $products) {\n    id\n    name\n    price\n  }\n}\n*/\n  "}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"The pluralization works with most English nouns, applying common rules like:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul,{children:["\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li,{children:"For words ending in 'y', change to 'ies' (e.g., \"category\" → \"categories\")"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li,{children:"For words ending in 's', 'x', 'ch', 'sh', add 'es' (e.g., \"box\" → \"boxes\")"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li,{children:'For regular nouns, add \'s\' (e.g., "product" → "products")'}),"\n"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"custom-recursion-depth",children:"Custom Recursion Depth"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"For complex schemas with circular references or deep nesting, you can control the recursion depth:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__.kL,{language:"typescript",dark:!0,format:!0,code:"\n// Define a schema with circular references\nconst categorySchema = withTypeName(z.object({\n  id: z.string(),\n  name: z.string(),\n}), 'Category');\n\n// Self-referential through lazy() for parent/child relationships\ncategorySchema.extend({\n  parentCategory: z.lazy(() => categorySchema).optional(),\n  subCategories: z.array(z.lazy(() => categorySchema)).optional(),\n});\n\n// Limit the depth to prevent overly complex queries\nconst query = createQuery(categorySchema, {\n  operationName: 'GetCategory',\n  variables: { id: 'cat123' },\n  maxDepth: 3 // Control recursion depth\n});\n\nconsole.log(query);\n/* Output limited to depth 3 */\n  "}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"complex-input-type-mapping",children:"Complex Input Type Mapping"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"For mutations with complex input types, you can provide detailed type mappings:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__.kL,{language:"typescript",dark:!0,format:!0,code:"\nimport { z } from 'zod';\nimport { createMutation } from 'zod2gql';\n\nconst orderResponseSchema = withTypeName(z.object({\n  id: z.string(),\n  status: z.string(),\n  items: z.array(z.object({\n    productId: z.string(),\n    quantity: z.number(),\n    price: z.number()\n  })),\n  total: z.number()\n}), 'Order');\n\nconst mutation = createMutation(orderResponseSchema, {\n  operationName: 'CreateOrder',\n  variables: {\n    orderInput: {\n      items: [\n        { productId: 'p1', quantity: 2 },\n        { productId: 'p2', quantity: 1 }\n      ],\n      shipping: { address: '123 Main St', method: 'express' },\n      payment: { type: 'credit', cardToken: 'token123' }\n    }\n  },\n  // Custom type mapping for complex inputs\n  inputTypeMap: {\n    orderInput: 'OrderInput',\n    'orderInput.items': 'OrderItemInput',\n    'orderInput.shipping': 'ShippingInput',\n    'orderInput.payment': 'PaymentMethodInput'\n  }\n});\n  "}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"batch-operations-with-array-schemas",children:"Batch Operations with Array Schemas"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Array schemas are particularly useful for batch operations:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__.kL,{language:"typescript",dark:!0,format:!0,code:"\nimport { z } from 'zod';\nimport { GQLType } from 'zod2gql';\n\n// Define user schema\nconst userSchema = withTypeName(z.object({\n  id: z.string(),\n  name: z.string(),\n  email: z.string(),\n  isActive: z.boolean(),\n}), 'User');\n\n// Batch create users\nconst batchCreateMutation = z.array(userSchema).toGQL(GQLType.Mutation, {\n  operationName: 'CreateUsers',\n  variables: {\n    users: [\n      { name: 'John', email: 'john@example.com', isActive: true },\n      { name: 'Jane', email: 'jane@example.com', isActive: true }\n    ]\n  },\n  inputTypeMap: {\n    users: '[UserInput!]'\n  }\n});\n\n// Batch update users\nconst batchUpdateMutation = z.array(userSchema).toGQL(GQLType.Mutation, {\n  operationName: 'UpdateUsersStatus',\n  variables: {\n    ids: ['user1', 'user2', 'user3'],\n    isActive: false\n  }\n});\n\n// Batch delete users\nconst batchDeleteMutation = z.array(userSchema).toGQL(GQLType.Mutation, {\n  operationName: 'DeleteUsers',\n  variables: {\n    ids: ['user1', 'user2', 'user3']\n  }\n});\n  "}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"using-with-graphql-client-libraries",children:"Using with GraphQL Client Libraries"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"zod2gql"})," works well with GraphQL client libraries like Apollo Client or urql:"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__.kL,{language:"typescript",dark:!0,format:!0,code:"\nimport { createQuery } from 'zod2gql';\nimport { useQuery } from '@apollo/client';\nimport { gql } from 'graphql-tag';\n\n// Define your schema\nconst userSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  email: z.string()\n});\n\n// Generate the query\nconst USER_QUERY = createQuery(userSchema, {\n  operationName: 'GetUser',\n  variables: { id: '$id' } // Using a placeholder\n});\n\n// Use with Apollo Client\nfunction UserProfile({ userId }) {\n  // Parse the generated query\n  const { loading, error, data } = useQuery(gql`${USER_QUERY.replace('$id', 'id')}`, {\n    variables: { id: userId }\n  });\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  return (\n    <div>\n      <h2>{data.user.name}</h2>\n      <p>{data.user.email}</p>\n    </div>\n  );\n}\n  "}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"using-array-schemas-with-apollo-client",children:"Using Array Schemas with Apollo Client"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Here's how to use array schemas with Apollo Client for listing and bulk operations:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__.kL,{language:"typescript",dark:!0,format:!0,code:"\nimport { z } from 'zod';\nimport { GQLType } from 'zod2gql';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { gql } from 'graphql-tag';\n\n// Define user schema\nconst userSchema = withTypeName(z.object({\n  id: z.string(),\n  name: z.string(),\n  email: z.string(),\n  isActive: z.boolean(),\n}), 'User');\n\n// Generate a users list query\nconst USERS_QUERY = z.array(userSchema).toGQL(GQLType.Query, {\n  variables: { \n    limit: '$limit', \n    offset: '$offset',\n    filters: '$filters'\n  }\n});\n\n// Generate a bulk delete mutation\nconst DELETE_USERS_MUTATION = z.array(userSchema).toGQL(GQLType.Mutation, {\n  variables: { \n    ids: '$ids'\n  }\n});\n\n// React component for user list\nfunction UserList() {\n  const { loading, error, data } = useQuery(gql`${USERS_QUERY.replace(/$limit|$offset|$filters/g, (m) => m.substring(1))}`, {\n    variables: { \n      limit: 10, \n      offset: 0,\n      filters: { isActive: true }\n    }\n  });\n  \n  const [deleteUsers] = useMutation(gql`${DELETE_USERS_MUTATION.replace('$ids', 'ids')}`);\n  \n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error: {error.message}</p>;\n  \n  const handleBulkDelete = (selectedIds) => {\n    deleteUsers({ \n      variables: { ids: selectedIds },\n      update: (cache) => {\n        // Update cache after deletion\n      }\n    });\n  };\n  \n  return (\n    <div>\n      <h1>Users</h1>\n      <table>\n        {/* Table content here */}\n      </table>\n      <button onClick={() => handleBulkDelete(['user1', 'user2'])}>\n        Delete Selected\n      </button>\n    </div>\n  );\n}\n  "}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"custom-field-resolution",children:"Custom Field Resolution"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"You can handle custom field resolution for specific schema types:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__.kL,{language:"typescript",dark:!0,format:!0,code:"\nimport { z } from 'zod';\nimport { GQLType } from 'zod2gql';\n\n// Extend the base processSchema function for custom field handling\nconst originalToGQL = z.ZodObject.prototype.toGQL;\n\nz.ZodObject.prototype.toGQL = function(\n  queryType = GQLType.Query,\n  options = {},\n  depth = 0\n) {\n  // Special handling for schemas with a specific type name\n  if ((this as any)._def.typeName === 'CustomType' && depth === 0) {\n    // Custom field generation logic\n    const fields = customFieldGenerator(this);\n    return `${queryType} ${options.operationName || ''}(...) {\n  ${fields}\n}`;\n  }\n  \n  // Fall back to the original implementation\n  return originalToGQL.call(this, queryType, options, depth);\n};\n\nfunction customFieldGenerator(schema) {\n  // Your custom field generation logic here\n  // ...\n}\n  "}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"composing-multiple-schemas",children:"Composing Multiple Schemas"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"You can compose multiple schemas for more complex operations:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__.kL,{language:"typescript",dark:!0,format:!0,code:"\nimport { z } from 'zod';\nimport { createQuery } from 'zod2gql';\n\nconst userSchema = withTypeName(z.object({\n  id: z.string(),\n  name: z.string(),\n  email: z.string()\n}), 'User');\n\nconst postSchema = withTypeName(z.object({\n  id: z.string(),\n  title: z.string(),\n  content: z.string()\n}), 'Post');\n\nconst profileSchema = withTypeName(z.object({\n  user: userSchema,\n  recentPosts: z.array(postSchema),\n  stats: z.object({\n    postCount: z.number(),\n    followersCount: z.number()\n  })\n}), 'Profile');\n\nconst query = createQuery(profileSchema, {\n  operationName: 'GetUserProfile',\n  variables: { userId: 'user123' }\n});\n\nconsole.log(query);\n/* Output:\nquery GetUserProfile($userId: String!) {\n  profile(userId: $userId) {\n    user {\n      id\n      name\n      email\n    }\n    recentPosts {\n      id\n      title\n      content\n    }\n    stats {\n      postCount\n      followersCount\n    }\n  }\n}\n*/\n  "})]})}function MDXContent(props={}){const{wrapper:MDXLayout}={...(0,C_Users_Jameson_Source_AGI_aginterface_src_lib_zod2gql_node_modules_storybook_addon_docs_dist_shims_mdx_react_shim_mjs__WEBPACK_IMPORTED_MODULE_7__.R)(),...props.components};return MDXLayout?(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(MDXLayout,{...props,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_createMdxContent,{...props})}):_createMdxContent(props)}},"./node_modules/@mdx-js/react/lib/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{R:()=>useMDXComponents,x:()=>MDXProvider});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/next/dist/compiled/react/index.js");const emptyComponents={},MDXContext=react__WEBPACK_IMPORTED_MODULE_0__.createContext(emptyComponents);function useMDXComponents(components){const contextComponents=react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext);return react__WEBPACK_IMPORTED_MODULE_0__.useMemo((function(){return"function"==typeof components?components(contextComponents):{...contextComponents,...components}}),[contextComponents,components])}function MDXProvider(properties){let allComponents;return allComponents=properties.disableParentContext?"function"==typeof properties.components?properties.components(emptyComponents):properties.components||emptyComponents:useMDXComponents(properties.components),react__WEBPACK_IMPORTED_MODULE_0__.createElement(MDXContext.Provider,{value:allComponents},properties.children)}},"./node_modules/@storybook/addon-docs/dist/index.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{Hl:()=>_storybook_blocks__WEBPACK_IMPORTED_MODULE_4__.Hl,W8:()=>_storybook_blocks__WEBPACK_IMPORTED_MODULE_4__.W8,gG:()=>_storybook_blocks__WEBPACK_IMPORTED_MODULE_4__.gG,kL:()=>_storybook_blocks__WEBPACK_IMPORTED_MODULE_4__.kL});__webpack_require__("./node_modules/@storybook/addon-docs/dist/chunk-PRSJUHPQ.mjs"),__webpack_require__("./node_modules/@storybook/addon-docs/dist/chunk-NUUEMKO5.mjs"),__webpack_require__("./node_modules/@storybook/addon-docs/dist/chunk-H6MOWX77.mjs"),__webpack_require__("storybook/internal/preview-api");var _storybook_blocks__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs")},"./node_modules/@storybook/blocks/dist sync recursive":module=>{function webpackEmptyContext(req){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}webpackEmptyContext.keys=()=>[],webpackEmptyContext.resolve=webpackEmptyContext,webpackEmptyContext.id="./node_modules/@storybook/blocks/dist sync recursive",module.exports=webpackEmptyContext},"./node_modules/@storybook/core/dist/components sync recursive":module=>{function webpackEmptyContext(req){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}webpackEmptyContext.keys=()=>[],webpackEmptyContext.resolve=webpackEmptyContext,webpackEmptyContext.id="./node_modules/@storybook/core/dist/components sync recursive",module.exports=webpackEmptyContext},"./node_modules/@storybook/core/dist/theming sync recursive":module=>{function webpackEmptyContext(req){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}webpackEmptyContext.keys=()=>[],webpackEmptyContext.resolve=webpackEmptyContext,webpackEmptyContext.id="./node_modules/@storybook/core/dist/theming sync recursive",module.exports=webpackEmptyContext},"./src/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{Hh:()=>formatVariablesDeclaration,Jf:()=>getOperationFieldName,Nt:()=>GQLType,ON:()=>formatFieldArguments,fO:()=>processFields});var zod__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/zod/lib/index.mjs"),_mutation__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/mutation.ts"),_query__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/query.ts"),_subscription__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/subscription.ts"),GQLType=function(GQLType){return GQLType.Query="query",GQLType.Mutation="mutation",GQLType.Subscription="subscription",GQLType}({});const getOperationFieldName=(schema,operationName,isArray=!1)=>{let fieldName="";if(operationName){fieldName=operationName;const prefixes=["Get","Create","Update","Delete","Subscribe"];for(const prefix of prefixes)if(fieldName.startsWith(prefix)){fieldName=fieldName.substring(prefix.length);break}fieldName=fieldName.charAt(0).toLowerCase()+fieldName.slice(1)}else if(schema instanceof zod__WEBPACK_IMPORTED_MODULE_3__.z.ZodArray){const elementSchema=schema._def.type;elementSchema instanceof zod__WEBPACK_IMPORTED_MODULE_3__.z.ZodObject&&(fieldName=getOperationFieldName(elementSchema),isArray=!0)}else if(schema instanceof zod__WEBPACK_IMPORTED_MODULE_3__.z.ZodObject)if(schema.description)fieldName=schema.description.charAt(0).toLowerCase()+schema.description.slice(1);else{const typeName=schema._def.typeName||"";typeName&&"ZodObject"!==typeName&&(fieldName=typeName.charAt(0).toLowerCase()+typeName.slice(1))}return isArray?(word=fieldName)?word.endsWith("y")?word.slice(0,-1)+"ies":word.endsWith("s")||word.endsWith("x")||word.endsWith("ch")||word.endsWith("sh")?word+"es":word+"s":"":fieldName;var word},formatVariablesDeclaration=(variables,inputTypeMap)=>variables&&0!==Object.keys(variables).length?`(${Object.entries(variables).map((([key,value])=>{if(inputTypeMap&&inputTypeMap[key])return`$${key}: ${inputTypeMap[key]}!`;const inferType=val=>{if(null===val)return"String";if(Array.isArray(val)){return`[${val.length>0?inferType(val[0]):"String"}]`}switch(typeof val){case"number":return Number.isInteger(val)?"Int":"Float";case"boolean":return"Boolean";case"object":return`${key.charAt(0).toUpperCase()+key.slice(1)}Input`;default:return"String"}};return`$${key}: ${inferType(value)}!`})).join(", ")})`:"",formatFieldArguments=variables=>variables&&0!==Object.keys(variables).length?`(${Object.entries(variables).map((([key])=>`${key}: $${key}`)).join(", ")})`:"",processFields=(schema,queryType,options={},depth=0)=>{const{maxDepth=10}=options;if(depth>maxDepth)return"";const indent="  ".repeat(depth);let query="";const shape=schema._def.shape();for(const[key,value]of Object.entries(shape)){const processSchema=(schema,fieldName)=>{const unwrappedSchema=schema instanceof zod__WEBPACK_IMPORTED_MODULE_3__.z.ZodOptional||schema instanceof zod__WEBPACK_IMPORTED_MODULE_3__.z.ZodNullable?schema._def.innerType:schema;if(unwrappedSchema instanceof zod__WEBPACK_IMPORTED_MODULE_3__.z.ZodObject)query+=`${indent}${fieldName} {\n${processFields(unwrappedSchema,queryType,options,depth+1)}${indent}}\n`;else if(unwrappedSchema instanceof zod__WEBPACK_IMPORTED_MODULE_3__.z.ZodArray){const elementType=unwrappedSchema._def.type;elementType instanceof zod__WEBPACK_IMPORTED_MODULE_3__.z.ZodObject?query+=`${indent}${fieldName} {\n${processFields(elementType,queryType,options,depth+1)}${indent}}\n`:query+=`${indent}${fieldName}\n`}else query+=`${indent}${fieldName}\n`};value instanceof zod__WEBPACK_IMPORTED_MODULE_3__.z.ZodType?processSchema(value,key):query+=`${indent}${key}\n`}return query};zod__WEBPACK_IMPORTED_MODULE_3__.z.ZodObject.prototype.toGQL=function(queryType="query",options={},depth=0){if(depth>0)return processFields(this,queryType,options,depth);switch(queryType){case"query":return(0,_query__WEBPACK_IMPORTED_MODULE_1__.O)(this,options);case"mutation":return(0,_mutation__WEBPACK_IMPORTED_MODULE_0__.n)(this,options);case"subscription":return(0,_subscription__WEBPACK_IMPORTED_MODULE_2__.d)(this,options);default:return""}},zod__WEBPACK_IMPORTED_MODULE_3__.z.ZodArray.prototype.toGQL=function(queryType="query",options={},depth=0){if(depth>0)return"";if(!(this._def.type instanceof zod__WEBPACK_IMPORTED_MODULE_3__.z.ZodObject))throw new Error("Array element must be a ZodObject for toGQL");switch(queryType){case"query":return function processArrayQuery(schema,options={}){const{operationName,variables,maxDepth=10}=options,elementSchema=schema._def.type;if(!(elementSchema instanceof zod__WEBPACK_IMPORTED_MODULE_3__.z.ZodObject))throw new Error("Array element must be a ZodObject");const operation=operationName?` ${operationName}`:"",varsString=formatVariablesDeclaration(variables,options.inputTypeMap),fieldArgs=formatFieldArguments(variables);return`query${operation}${varsString} {\n  ${getOperationFieldName(schema,operationName)}${fieldArgs} {\n${processFields(elementSchema,"query",options,2)}  }\n}`}(this,options);case"mutation":return function processArrayMutation(schema,options={}){const{operationName,variables,maxDepth=10}=options,elementSchema=schema._def.type;if(!(elementSchema instanceof zod__WEBPACK_IMPORTED_MODULE_3__.z.ZodObject))throw new Error("Array element must be a ZodObject");const operation=operationName?` ${operationName}`:"",varsString=formatVariablesDeclaration(variables,options.inputTypeMap),fieldArgs=formatFieldArguments(variables);return`mutation${operation}${varsString} {\n  ${getOperationFieldName(schema,operationName)}${fieldArgs} {\n${processFields(elementSchema,"mutation",options,2)}  }\n}`}(this,options);case"subscription":return function processArraySubscription(schema,options={}){const{operationName,variables,maxDepth=10}=options,elementSchema=schema._def.type;if(!(elementSchema instanceof zod__WEBPACK_IMPORTED_MODULE_3__.z.ZodObject))throw new Error("Array element must be a ZodObject");const operation=operationName?` ${operationName}`:"",varsString=formatVariablesDeclaration(variables,options.inputTypeMap),fieldArgs=formatFieldArguments(variables);return`subscription${operation}${varsString} {\n  ${getOperationFieldName(schema,operationName)}${fieldArgs} {\n${processFields(elementSchema,"subscription",options,2)}  }\n}`}(this,options);default:return""}}},"./src/mutation.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{W:()=>createMutation,n:()=>processMutation});var _index__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/index.ts");function processMutation(schema,options={}){const{operationName,variables,maxDepth=10,inputTypeMap}=options,operation=operationName?` ${operationName}`:"",varsString=((variables,inputTypeMap)=>variables&&0!==Object.keys(variables).length?`(${Object.entries(variables).map((([key,value])=>{if(inputTypeMap&&inputTypeMap[key])return`$${key}: ${inputTypeMap[key]}!`;let type="String";return"number"==typeof value?type="Int":"boolean"==typeof value?type="Boolean":"object"==typeof value&&null!==value&&(type=`${key.charAt(0).toUpperCase()+key.slice(1)}Input`),`$${key}: ${type}!`})).join(", ")})`:"")(variables,inputTypeMap),fieldArgs=(0,_index__WEBPACK_IMPORTED_MODULE_0__.ON)(variables),mutationField=(0,_index__WEBPACK_IMPORTED_MODULE_0__.Jf)(schema,operationName);return`${_index__WEBPACK_IMPORTED_MODULE_0__.Nt.Mutation}${operation}${varsString} {\n  ${mutationField}${fieldArgs} {\n${(0,_index__WEBPACK_IMPORTED_MODULE_0__.fO)(schema,_index__WEBPACK_IMPORTED_MODULE_0__.Nt.Mutation,options,2)}  }\n}`}function createMutation(schema,options={}){return schema.toGQL(_index__WEBPACK_IMPORTED_MODULE_0__.Nt.Mutation,options)}},"./src/query.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{O:()=>processQuery,V:()=>createQuery});var _index__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/index.ts"),console=__webpack_require__("./node_modules/console-browserify/index.js");function processQuery(schema,options={}){const{operationName,variables,maxDepth=10}=options,operation=operationName?` ${operationName}`:"",varsString=(0,_index__WEBPACK_IMPORTED_MODULE_0__.Hh)(variables,options.inputTypeMap),fieldArgs=(0,_index__WEBPACK_IMPORTED_MODULE_0__.ON)(variables),queryField=(0,_index__WEBPACK_IMPORTED_MODULE_0__.Jf)(schema,operationName);return console.log(operation,varsString,fieldArgs,queryField),`${_index__WEBPACK_IMPORTED_MODULE_0__.Nt.Query}${operation}${varsString} {\n  ${queryField}${fieldArgs} {\n${(0,_index__WEBPACK_IMPORTED_MODULE_0__.fO)(schema,_index__WEBPACK_IMPORTED_MODULE_0__.Nt.Query,options,2)}  }\n}`}function createQuery(schema,options={}){return schema.toGQL(_index__WEBPACK_IMPORTED_MODULE_0__.Nt.Query,options)}},"./src/subscription.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{K:()=>createSubscription,d:()=>processSubscription});var _index__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/index.ts");function processSubscription(schema,options={}){const{operationName,variables,maxDepth=10}=options,operation=operationName?` ${operationName}`:"",varsString=(0,_index__WEBPACK_IMPORTED_MODULE_0__.Hh)(variables,options.inputTypeMap),fieldArgs=(0,_index__WEBPACK_IMPORTED_MODULE_0__.ON)(variables),subscriptionField=(0,_index__WEBPACK_IMPORTED_MODULE_0__.Jf)(schema,operationName);return`${_index__WEBPACK_IMPORTED_MODULE_0__.Nt.Subscription}${operation}${varsString} {\n  ${subscriptionField}${fieldArgs} {\n${(0,_index__WEBPACK_IMPORTED_MODULE_0__.fO)(schema,_index__WEBPACK_IMPORTED_MODULE_0__.Nt.Subscription,options,2)}  }\n}`}function createSubscription(schema,options={}){return schema.toGQL(_index__WEBPACK_IMPORTED_MODULE_0__.Nt.Subscription,options)}}}]);